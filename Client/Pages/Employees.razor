@page "/employees"
@using ComposedHealthBase.BaseClient.Enums
@using ComposedHealthBase.BaseClient.Services
@using ComposedHealthBase.Shared.DTOs
@using ComposedHealthBase.BaseClient.Components
@using Shared.DTOs.CRM
@using Shared.DTOs.Scheduling
@using MudBlazor
@using Client.Pages.Components.TabComponents
@inject ILazyLookupService<EmployeeDto> EmployeeLookupService
@inject ILazyLookupService<CustomerDto> CustomerLookupService
@inject ILazyLookupService<ManagerDto> ManagerLookupService
@inject ILazyLookupService<ScheduleDto> ScheduleLookupService
@inject ILazyLookupService<ReferralDto> ReferralLookupService
@inject ILazyLookupService<ContractDto> ContractLookupService
@inject ILazyLookupService<EmployeeDocumentDto> DocumentLookupService

@attribute [Authorize]

<MudText Typo="Typo.h1">Employees</MudText>

<MudText Typo="Typo.body1">Select an employee to view details</MudText>
<LazyLookup TDto="EmployeeDto" FieldType="LazyLookupEnum.Search" @bind-ItemId="selectedEmployeeId" Label="Employee Name" @ref="employeeSelector" />
@if (employeeSelector?.SelectedItem == null)
{
    <MudButton OnClick="CreateEmployee">Add New Employee</MudButton>
}

@if (employeeSelector?.SelectedItem != null)
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs">
        <MudTabPanel Text="Employee">
            <EmployeeDetailsTab Model="employeeSelector.SelectedItem" OnSave="HandleEmployeeSave" OnDelete="DeleteEmployee" />
        </MudTabPanel>
        <MudTabPanel Text="Appointments" OnClick="GetAllAppointmentsByEmployeeId">
            <AppointmentsTab Appointments="appointments" />
        </MudTabPanel>
        <MudTabPanel Text="Referrals" OnClick="GetAllReferralsByEmployeeId">
            <ReferralsTab Referrals="referrals" />
        </MudTabPanel>
        <MudTabPanel Text="Managers" OnClick="GetAllManagersByEmployeeId">
            <ManagersTab Managers="managers" />
        </MudTabPanel>
        <MudTabPanel Text="Documents" OnClick="GetAllDocumentsByEmployeeId">
            <DocumentBrowser TDto="EmployeeDocumentDto" Documents="documents" NewDocument="newDocument"
                OnSave="OnDocumentSave" />
        </MudTabPanel>
        <MudTabPanel Text="Notes">
            <NotesTab Model="employeeSelector.SelectedItem" OnSave="HandleEmployeeSave" TDto="EmployeeDto" />
        </MudTabPanel>
    </MudTabs>
}


@code {
    private MudTabs tabs = default!;
    private List<ScheduleDto> appointments = new();
    private List<ReferralDto> referrals = new();
    private List<ManagerDto> managers = new();
    private List<EmployeeDocumentDto> documents = new();
    private EmployeeDocumentDto newDocument = default!;
    private Guid selectedEmployeeId = Guid.Empty;
    private LazyLookup<EmployeeDto> employeeSelector = default!;
    private void CreateEmployee()
    {
        employeeSelector.SelectedItem = new EmployeeDto();
    }
    private async Task HandleEmployeeSave()
    {
        if (employeeSelector.SelectedItem == null) return;
        if (employeeSelector.SelectedItem.Id == Guid.Empty)
        {
            await EmployeeLookupService.AddItem(employeeSelector.SelectedItem, CancellationToken.None);
        }
        else
        {
            await EmployeeLookupService.UpdateItem(employeeSelector.SelectedItem, CancellationToken.None);
        }
    }
    async Task DeleteEmployee()
    {
        if (employeeSelector.SelectedItem == null) return;
        await EmployeeLookupService.DeleteItem(employeeSelector.SelectedItem.Id, CancellationToken.None);
    }
    private async Task GetAllAppointmentsByEmployeeId()
    {
        if (employeeSelector.SelectedItem == null) return;
        appointments = (await ScheduleLookupService.GetAllByTenantId(employeeSelector.SelectedItem.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllReferralsByEmployeeId()
    {
        if (employeeSelector.SelectedItem == null) return;
        referrals = (await ReferralLookupService.GetAllByTenantId(employeeSelector.SelectedItem.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllManagersByEmployeeId()
    {
        if (employeeSelector.SelectedItem == null) return;
        managers = (await ManagerLookupService.GetAllByTenantId(employeeSelector.SelectedItem.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllDocumentsByEmployeeId()
    {
        if (employeeSelector.SelectedItem == null) return;
        documents = (await DocumentLookupService.GetAllBySubjectId(employeeSelector.SelectedItem.Id, CancellationToken.None)).ToList();
        newDocument = new EmployeeDocumentDto
        {
            Name = ""
        };
    }
    private async Task OnDocumentSave()
    {
        if (selectedEmployeeId == null) return;
        documents = (await DocumentLookupService.GetAllBySubjectId(selectedEmployeeId, CancellationToken.None)).ToList();
        newDocument = new EmployeeDocumentDto
        {
            Name = ""
        };
    }
}
