@page "/employees"
@using ComposedHealthBase.BaseClient.Services
@using ComposedHealthBase.Shared.DTOs
@using Shared.DTOs.CRM
@using Shared.DTOs.Scheduling
@using MudBlazor
@using Client.Pages.Components.TabComponents
@using ComposedHealthBase.BaseClient.Components
@inject ILazyLookupService<EmployeeDto> EmployeeLookupService
@inject ILazyLookupService<CustomerDto> CustomerLookupService
@inject ILazyLookupService<ManagerDto> ManagerLookupService
@inject ILazyLookupService<ScheduleDto> ScheduleLookupService
@inject ILazyLookupService<ReferralDto> ReferralLookupService
@inject ILazyLookupService<ContractDto> ContractLookupService
@inject ILazyLookupService<DocumentDto> DocumentLookupService
@inject IDocumentUploadService DocumentUploadService

@attribute [Authorize]

<MudText Typo="Typo.h1">Employees</MudText>

<MudText Typo="Typo.body1">Select an employee to view details</MudText>
<LazyLookup TDto="EmployeeDto" @bind-ItemId="selectedEmployeeId" Label="Employee Name" />
@if (selectedEmployee == null)
{
    <MudButton OnClick="CreateEmployee">Add New Employee</MudButton>
}

@if (selectedEmployee != null)
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs">
        <MudTabPanel Text="Employees">
            <EmployeeDetailsTab Model="selectedEmployee" OnSave="HandleEmployeeSave" OnDelete="DeleteEmployee" />
        </MudTabPanel>
        <MudTabPanel Text="Appointments" OnClick="GetAllAppointmentsByEmployeeId">
            <AppointmentsTab Appointments="appointments" />
        </MudTabPanel>
        <MudTabPanel Text="Referrals" OnClick="GetAllReferralsByEmployeeId">
            <ReferralsTab Referrals="referrals" />
        </MudTabPanel>
        <MudTabPanel Text="Managers" OnClick="GetAllManagersByEmployeeId">
            <ManagersTab Managers="managers" />
        </MudTabPanel>
        <MudTabPanel Text="Documents" OnClick="GetAllDocumentsByEmployeeId">
            <DocumentLibraryTab Documents="documents" OnSave="@(async (x) => await OnDocumentSave(x))" />
        </MudTabPanel>
        <MudTabPanel Text="Notes">
            <NotesTab Model="selectedEmployee" OnSave="HandleEmployeeSave" TDto="EmployeeDto" />
        </MudTabPanel>
    </MudTabs>
}


@code {
    private MudTabs tabs = default!;
    private EmployeeDto? selectedEmployee => 
        EmployeeLookupService.ItemList.TryGetValue(selectedEmployeeId, out var employee) ? employee : null;
    private long selectedEmployeeId { get; set; } = 0;
    private List<ScheduleDto> appointments = new();
    private List<ReferralDto> referrals = new();
    private List<ManagerDto> managers = new();
    private List<DocumentDto> documents = new();
    private List<ContractDto> contracts = new();
    private List<ProductDto> products = new();

    private void CreateEmployee()
    {
        EmployeeLookupService.ItemList.TryAdd(0, new EmployeeDto());
        selectedEmployeeId = 0;
    }
    private async Task HandleEmployeeSave()
    {
        if (selectedEmployee == null) return;
        if (selectedEmployee.Id == 0)
        {
            await EmployeeLookupService.AddItem(selectedEmployee, CancellationToken.None);
        }
        else
        {
            await EmployeeLookupService.UpdateItem(selectedEmployee, CancellationToken.None);
        }
    }
    async Task DeleteEmployee()
    {
        if (selectedEmployee == null) return;
        await EmployeeLookupService.DeleteItem(selectedEmployee.Id, CancellationToken.None);
    }
    private async Task GetAllAppointmentsByEmployeeId()
    {
        if (selectedEmployee == null) return;
        appointments = (await ScheduleLookupService.GetAllByTenantId(selectedEmployee.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllReferralsByEmployeeId()
    {
        if (selectedEmployee == null) return;
        referrals = (await ReferralLookupService.GetAllByTenantId(selectedEmployee.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllManagersByEmployeeId()
    {
        if (selectedEmployee == null) return;
        managers = (await ManagerLookupService.GetAllByTenantId(selectedEmployee.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllProductsByEmployeeId()
    {
        if (selectedEmployee == null) return;
        contracts = (await ContractLookupService.GetAllByTenantId(selectedEmployee.Id, CancellationToken.None)).ToList();

        products = new List<ProductDto>();
        foreach (var contract in contracts)
        {
            if (contract.Products != null)
            {
                products.AddRange(contract.Products);
            }
        }
    }
    private async Task GetAllDocumentsByEmployeeId()
    {
        if (selectedEmployee == null) return;
        documents = (await DocumentLookupService.GetAllByTenantId(selectedEmployee.Id, CancellationToken.None)).ToList();
    }
    private async Task OnDocumentSave(Tuple<IDocumentDto,IBrowserFile> document)
    {
        await DocumentUploadService.UploadDocument(document);
    }
}
