@page "/employees"
@using ComposedHealthBase.BaseClient.Services
@using Shared.DTOs.CRM
@using Shared.DTOs.Scheduling
@using MudBlazor
@using Client.Pages.Components.TabComponents
@using ComposedHealthBase.BaseClient.Components
@inject ILazyLookupService<EmployeeDto> LookupService
@attribute [Authorize]

<MudText Typo="Typo.h1">Employees</MudText>

<MudText Typo="Typo.body1">Select an employee to view details</MudText>
<LazyLookup TDto="EmployeeDto" @bind-ItemId="selectedEmployeeId" Label="Employee Name" />
@if (selectedEmployee == null)
{
    <MudButton OnClick="CreateEmployee">Add New Employee</MudButton>
}

@if (selectedEmployee != null)
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs">
        <MudTabPanel Text="Employees">
            <EmployeeDetailsTab Model="selectedEmployee" OnSave="HandleEmployeeSave" OnDelete="DeleteEmployee"
                IsLoading="isLoading" />
        </MudTabPanel>
        <MudTabPanel Text="Appointments" OnClick="GetAllAppointmentsByEmployeeId">
            <AppointmentsTab Appointments="appointments" />
        </MudTabPanel>
        <MudTabPanel Text="Referrals" OnClick="GetAllReferralsByEmployeeId">
            <ReferralsTab Referrals="referrals" />
        </MudTabPanel>
        <MudTabPanel Text="Managers" OnClick="GetAllManagersByEmployeeId">
            <ManagersTab Managers="managers" />
        </MudTabPanel>
        <MudTabPanel Text="Documents" OnClick="GetAllDocumentsByEmployeeId">
            <DocumentLibraryTab Documents="documents" OnSave="UploadDocument" />
        </MudTabPanel>
        <MudTabPanel Text="Notes">
            <NotesTab Model="selectedEmployee" OnSave="HandleEmployeeSave" TDto="EmployeeDto" />
        </MudTabPanel>
    </MudTabs>
}


@code {
    private MudTabs tabs = default!;
    private EmployeeDto? selectedEmployee => 
        LookupService.ItemList.TryGetValue(selectedEmployeeId, out var employee) ? employee : null;
    private long selectedEmployeeId { get; set; } = 0;
    private bool isLoading;
    private HttpClient httpClient = default!;
    private List<ScheduleDto> appointments = new();
    private List<ReferralDto> referrals = new();
    private List<ManagerDto> managers = new();
    private List<DocumentDto> documents = new();

    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; } = default!;
    [Inject]
    private ISnackbar Snackbar { get; set; } = default!;
    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("api");
    }
    private async Task GetAllAppointmentsByEmployeeId()
    {
        if (selectedEmployee == null) return;
        try
        {
            var result = await
            httpClient.GetFromJsonAsync<IEnumerable<ScheduleDto>>($"api/schedule/GetAllByEmployeeId/{selectedEmployee.Id}");
            appointments = result?.ToList() ?? new List<ScheduleDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load appointments: {ex.Message}", Severity.Error);
            appointments = new List<ScheduleDto>();
        }
    }

    private async Task GetAllReferralsByEmployeeId()
    {
        if (selectedEmployee == null) return;
        try
        {
            var result = await
            httpClient.GetFromJsonAsync<IEnumerable<ReferralDto>>($"api/referral/GetAllByEmployeeId/{selectedEmployee.Id}");
            referrals = result?.ToList() ?? new List<ReferralDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load referrals: {ex.Message}", Severity.Error);
            referrals = new List<ReferralDto>();
        }
    }

    private async Task GetAllManagersByEmployeeId()
    {
        if (selectedEmployee == null) return;
        try
        {
            var result = await
            httpClient.GetFromJsonAsync<IEnumerable<ManagerDto>>($"api/manager/GetAllByEmployeeId/{selectedEmployee.Id}");
            managers = result?.ToList() ?? new List<ManagerDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load managers: {ex.Message}", Severity.Error);
            managers = new List<ManagerDto>();
        }
    }

    private async Task GetAllDocumentsByEmployeeId()
    {
        if (selectedEmployee == null) return;
        try
        {
            var result = await
            httpClient.GetFromJsonAsync<IEnumerable<DocumentDto>>($"api/document/GetAllByEmployeeId/{selectedEmployee.Id}");
            documents = result?.ToList() ?? new List<DocumentDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load documents: {ex.Message}", Severity.Error);
            documents = new List<DocumentDto>();
        }
    }

    private async Task UploadDocument(Tuple<DocumentDto, IBrowserFile> document)
    {
        if (selectedEmployee == null)
        {
            Snackbar.Add("Employee must be selected.", Severity.Error);
            return;
        }

        isLoading = true;
        try
        {
            using var content = new MultipartFormDataContent();
            content.Add(new StringContent(document.Item1.Name ?? string.Empty), "Name");
            content.Add(new StringContent(document.Item1.Description ?? string.Empty), "Description");
            content.Add(new StringContent(document.Item1.FilePath ?? string.Empty), "FilePath");
            content.Add(new StringContent(selectedEmployeeId.ToString()), "EmployeeId");

            var fileContent = new StreamContent(document.Item2.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10)); // Max 10MB file
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(document.Item2.ContentType);
            content.Add(fileContent, "file", document.Item2.Name);

            var response = await httpClient.PostAsync("api/document/upload", content);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Document uploaded successfully.", Severity.Success);
                await GetAllDocumentsByEmployeeId(); // Refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to upload document: {response.StatusCode} - {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading document: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveNotes()
    {
        if (selectedEmployee == null) return;
        try
        {
            var response = await httpClient.PutAsJsonAsync($"api/employee/update", selectedEmployee);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Notes saved.", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Failed to save notes: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save notes: {ex.Message}", Severity.Error);
        }
    }
    private void CreateEmployee()
    {
        LookupService.ItemList.TryAdd(0, new EmployeeDto());
        selectedEmployeeId = 0;
    }
    private async Task HandleEmployeeSave(EmployeeDto employee)
    {
        isLoading = true;
        try
        {
            if (employee.Id == 0)
            {
                var response = await httpClient.PostAsJsonAsync("api/employee/create", employee);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Employee created.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Failed to create employee: {response.StatusCode}", Severity.Error);
                }
            }
            else
            {
                var response = await httpClient.PutAsJsonAsync($"api/employee/update", employee);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Employee updated.", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Failed to update employee: {response.StatusCode}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save employee: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteEmployee()
    {
        if (selectedEmployee == null) return;
        isLoading = true;
        try
        {
            var response = await httpClient.DeleteAsync($"api/employee/delete/{selectedEmployee.Id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Employee deleted successfully.", Severity.Success);
                selectedEmployeeId = 0;
            }
            else
            {
                Snackbar.Add($"Failed to delete employee: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting employee: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}
