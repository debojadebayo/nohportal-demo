@page "/case-management"
@using System.Collections.Generic
@using MudBlazor
@using Shared.DTOs.Scheduling
@using Shared.Enums
@using ComposedHealthBase.BaseClient.Services
@inject ILazyLookupService<ScheduleDto> ScheduleLookupService

<MudItem xs="12" sm="6">
    <MudText Typo="Typo.h1">Case Management</MudText>
</MudItem>

<MudExpansionPanels>
    <MudExpansionPanel Text="Upcoming appointments" Expanded="true">
        <MudDataGrid Items="@_upcomingAppointments" Dense="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.ReferralId" Title="Referral ID" />
                <PropertyColumn Property="x => x.Start" Title="Date & Time" />
                <PropertyColumn Property="x => x.CreatedDate" Title="Booked On" />
                <PropertyColumn Property="x => x.EmployeeId" Title="Employee" />
                <PropertyColumn Property="x => x.ProductId" Title="Product" />
            </Columns>
        </MudDataGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Completed appointments">
        <MudDataGrid Items="@_completedAppointments" Dense="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.ReferralId" Title="Referral ID" />
                <PropertyColumn Property="x => x.Start" Title="Date & Time" />
                <PropertyColumn Property="x => x.CreatedDate" Title="Booked On" />
                <PropertyColumn Property="x => x.EmployeeId" Title="Employee" />
                <PropertyColumn Property="x => x.ProductId" Title="Product" />
            </Columns>
        </MudDataGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Missed appointments">
        <MudDataGrid Items="@_missedAppointments" Dense="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.ReferralId" Title="Referral ID" />
                <PropertyColumn Property="x => x.Start" Title="Date & Time" />
                <PropertyColumn Property="x => x.CreatedDate" Title="Booked On" />
                <PropertyColumn Property="x => x.EmployeeId" Title="Employee" />
                <PropertyColumn Property="x => x.ProductId" Title="Product" />
            </Columns>
        </MudDataGrid>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Cancelled appointments">
        <MudDataGrid Items="@_cancelledAppointments" Dense="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.ReferralId" Title="Referral ID" />
                <PropertyColumn Property="x => x.Start" Title="Date & Time" />
                <PropertyColumn Property="x => x.CreatedDate" Title="Booked On" />
                <PropertyColumn Property="x => x.EmployeeId" Title="Employee" />
                <PropertyColumn Property="x => x.ProductId" Title="Product" />
            </Columns>
        </MudDataGrid>
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    [Parameter] public List<ScheduleDto> AllAppointments { get; set; } = new();
    private List<ScheduleDto> _upcomingAppointments => AllAppointments.Where(x => x.Start > DateTime.UtcNow).ToList();
    private List<ScheduleDto> _completedAppointments => AllAppointments.Where(x => x.Start < DateTime.UtcNow && x.Status ==
    ScheduleStatusEnum.Entered).ToList();
    private List<ScheduleDto> _missedAppointments => AllAppointments.Where(x => x.Start < DateTime.UtcNow && x.Status ==
    ScheduleStatusEnum.Missed).ToList();
    private List<ScheduleDto> _cancelledAppointments => AllAppointments.Where(x => x.Status ==
    ScheduleStatusEnum.Cancelled).ToList();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        AllAppointments = (await ScheduleLookupService.GetAllItems(CancellationToken.None)).ToList();
    }
}
