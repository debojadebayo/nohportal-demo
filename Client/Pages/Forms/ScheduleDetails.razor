@using MudBlazor
@using Shared.DTOs.Scheduling
@inject IHttpClientFactory HttpClientFactory

<MudDialog>
    <DialogContent>
        <MudForm Model="@model" @ref="@form" ValidationDelay="0">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudSelect T="long" Label="Referral" @bind-Value="model.ReferralId">
                        @foreach (var referral in Referrals)
                        {
                            <MudSelectItem T="long" Value="@referral.Id">@referral.ReferralDetails</MudSelectItem>
                        }
                    </MudSelect>
                    <MudSelect T="long" Label="Clinician" @bind-Value="model.ClinicianId">
                        @foreach (var clinician in Clinicians)
                        {
                            <MudSelectItem T="long" Value="@clinician.Id">@clinician.FirstName @clinician.LastName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Date="model.Start" Label="Start " Variant="Variant.Outlined" />
                    <MudDatePicker Date="model.End" Label="End " Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject]
    ISnackbar Snackbar { get; set; }
    [Inject]
    private IDialogService DialogService { get; set; } // for MessageBox

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    private HttpClient httpClient;
    private IEnumerable<ClinicianDto> Clinicians { get; set; } = new List<ClinicianDto>();
    private IEnumerable<ReferralDto> Referrals { get; set; } = new List<ReferralDto>();
    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("api");
        try
        {
            var clinicians = await httpClient.GetFromJsonAsync<IEnumerable<ClinicianDto>>("api/clinician/getall");
            Clinicians = clinicians ?? new List<ClinicianDto>();

            var referrals = await httpClient.GetFromJsonAsync<IEnumerable<ReferralDto>>("api/referral/getall");
            Referrals = referrals ?? new List<ReferralDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            MudDialog.Close(DialogResult.Ok(model));
        }
    }
    private void Cancel() => MudDialog.Cancel();
    MudForm form;
    [Parameter]
    public ScheduleDto model { get; set; } = new ScheduleDto();
}
