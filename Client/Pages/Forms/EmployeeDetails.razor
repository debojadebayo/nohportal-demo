@using Shared.Validators
@using Shared.DTOs.CRM
@inject IHttpClientFactory HttpClientFactory

<MudAutocomplete T="EmployeeDto"
                 @bind-Value="model"
                 SearchFunc="Search"
                 ToStringFunc="@(e => e is null ? string.Empty : $"{e.FirstName} {e.LastName} - {e.Id}")"
                 Variant="Variant.Outlined"
                 Label="Look up Employee"
                 Clearable="true" />

<MudForm Model="@model" @ref="@form" Validation="@(employeeValidator.ValidateValue)" ValidationDelay="0">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="model.FirstName" For="@(() => model.FirstName)" Immediate="true"
                Label="First Name" Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.LastName" For="@(() => model.LastName)" Immediate="true" Label="Last Name"
                Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.Address1" For="@(() => model.Address1)" Immediate="true" Label="Address Line 1"
                Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.Address2" For="@(() => model.Address2)" Immediate="true" Label="Address Line 2"
                Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.Address3" For="@(() => model.Address3)" Immediate="true" Label="Address Line 3"
                Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.Postcode" For="@(() => model.Postcode)" Immediate="true" Label="Postcode"
                Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.Email" For="@(() => model.Email)" Immediate="true" Label="Email"
                Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="model.Telephone" For="@(() => model.Telephone)" Immediate="true"
                Label="Telephone" Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.Id" For="@(() => model.Id)" Immediate="true" Label="Company ID"
                Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.JobRole" For="@(() => model.JobRole)" Immediate="true" Label="Job Role"
                Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.Department" For="@(() => model.Department)" Immediate="true"
                Label="Department" Variant="Variant.Outlined" />

            <MudTextField @bind-Value="model.LineManager" For="@(() => model.LineManager)" Immediate="true"
                Label="Line Manager" Variant="Variant.Outlined" />
        </MudItem>
    </MudGrid>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
            OnClick="@(async () => await Submit())">Submit
        </MudButton>
    </MudCardActions>
</MudForm>

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    MudForm form;
    private HttpClient? httpClient;
    IEnumerable<EmployeeDto> employeeSearchList = new List<EmployeeDto>();
    EmployeeDto model = new EmployeeDto();
    EmployeeValidator employeeValidator = new EmployeeValidator();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            httpClient = HttpClientFactory.CreateClient("api");
            employeeSearchList = await httpClient.GetFromJsonAsync<IEnumerable<EmployeeDto>>("api/employee/getall");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employee data: {ex.Message}");
        }
    }

    private async Task<IEnumerable<EmployeeDto>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return new List<EmployeeDto>();
        return employeeSearchList.Where(x => x.FirstName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            Snackbar.Add("Submitted!");
        }
    }
}