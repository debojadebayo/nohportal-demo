@page "/referrals/new"
@using Shared.DTOs.Scheduling
@using Shared.DTOs.CRM
@using Shared.Validators
@using Shared.Enums
@using Shared.Factories.Scheduling
@using FluentValidation
@using MudBlazor
@using ComposedHealthBase.BaseClient.Services
@using ComposedHealthBase.BaseClient.Components
@using ComposedHealthBase.BaseClient.Enums
@using ComposedHealthBase.Shared.DTOs
@using Client.Pages.Components.Forms.ReferralDetailsForms
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILazyLookupService<ReferralDto> ReferralLookupService
@inject ILazyLookupService<ManagerDto> ManagerLookupService
@inject ILazyLookupService<EmployeeDto> EmployeeLookupService
@inject ILazyLookupService<CustomerDto> CustomerLookupService
@inject ReferralValidator referralValidator

<!-- Referral Type Selection -->
<MudExpansionPanels MultiExpansion="true" Elevation="2" Class="mb-4">
    <MudExpansionPanel Expanded="true">
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-3" />
                <MudText>Referral Type</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudSelect Value="Model.ReferralType" For="@(() => Model.ReferralType)" 
                        Label="Select Referral Type" Variant="Variant.Outlined" 
                        ValueChanged="@OnReferralTypeChanged"
                        T="ReferralTypeEnum">
                        <MudSelectItem Value="ReferralTypeEnum.CaseReferral">Case Referral</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_Admin">PPHA Form - Administrative or Office Worker </MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_Student">PPHA Form - Student</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_ClinStudent">PPHA Form - Clinical Student</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_ClinWorker">PPHA Form - Clinical Worker</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_ManWorker">PPHA Form - Manual or Safety Critical Worker</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaFitnessCertificate">PPHA Fitness Certificate</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaClinFitnessCertificate">PPHA Clinical Fitness Certificate</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.StudentClinFitnessCertificate">Student Clinical Fitness Certificate</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

<!-- Render appropriate form based on referral type -->
@{
    RenderFragment formContent;
    switch (Model.ReferralType)
    {
        case ReferralTypeEnum.CaseReferral when Model.Details is CaseReferralDetailsDto caseDetails:
            formContent = @<CaseReferralForm Model="caseDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.PphaForm_Admin when Model.Details is PphaFormAdminDto adminDetails:
            formContent = @<PphaAdminForm Model="adminDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.PphaForm_Student when Model.Details is PphaFormStudentDto studentDetails:
            formContent = @<PphaStudentForm Model="studentDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.PphaForm_ClinStudent when Model.Details is PphaFormClinStudentDto clinStudentDetails:
            formContent = @<PphaFormClinStudentForm Model="clinStudentDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.PphaForm_ClinWorker when Model.Details is PphaFormClinWorkerDto clinWorkerDetails:
            formContent = @<PphaFormClinWorkerForm Model="clinWorkerDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.PphaForm_ManWorker when Model.Details is PphaFormManWorkerDto manWorkerDetails:
            formContent = @<PphaFormManWorkerForm Model="manWorkerDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.PphaFitnessCertificate when Model.Details is PphaFitnessCertificateDto fitnessDetails:
            formContent = @<PphaFitnessCertificateForm Model="fitnessDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.PphaClinFitnessCertificate when Model.Details is PphaClinFitnessCertificateDto clinFitnessDetails:
            formContent = @<PphaClinFitnessCertificateForm Model="clinFitnessDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        case ReferralTypeEnum.StudentClinFitnessCertificate when Model.Details is StudentClinFitnessCertificateDto studentClinFitnessDetails:
            formContent = @<StudentClinFitnessCertificateForm Model="studentClinFitnessDetails" 
                OnSaveComplete="HandleDetailsUpdate" 
                CustomerId="CustomerId" 
                ShowAsDialog="ShowAsDialog" />;
            break;

        default:
            formContent = @<MudExpansionPanels MultiExpansion="true" Elevation="2" Class="mb-4">
                <MudExpansionPanel Expanded="true">
                    <TitleContent>
                        <div class="d-flex">
                            <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3" />
                            <MudText>Select Referral Type</MudText>
                        </div>
                    </TitleContent>
                    <ChildContent>
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.body1" Class="mb-3">
                                    Please select a referral type from the dropdown above to continue.
                                </MudText>
                                <MudButton Variant="Variant.Outlined" 
                                           Color="Color.Primary" 
                                           StartIcon="@Icons.Material.Filled.ArrowUpward">
                                    Select Referral Type Above
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>;
            break;
    }
}

@formContent

<MudForm @ref="form" Model="Model" Validation="@referralValidator.ValidateValue" ValidationDelay="0">
    <!-- Action Buttons -->
    <MudCardActions Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
            OnClick="@(async () => await Save())" 
            Disabled="@_saving"
            Class="ml-auto">
            @if (_saving)
            {
                <MudProgressCircular Color="Color.Default" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ml-2">@(IsNewReferral ? "Submitting..." : "Updating...")</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-2" />
                <MudText>@(IsNewReferral ? "Submit Referral" : "Update Referral")</MudText>
            }
        </MudButton>
    </MudCardActions>
</MudForm>

@code {
    [Parameter] public ReferralDto Model { get; set; } = new();
    [Parameter] public EventCallback<ReferralDto> OnSaveComplete { get; set; }
    [Parameter] public EventCallback<ReferralDto> OnSubmitComplete { get; set; }
    [Parameter] public Guid CustomerId { get; set; } = Guid.Empty;
    [Parameter] public bool ShowAsDialog { get; set; } = false;

    private MudForm form = new();
    private ReferralDetailsValidator formDataValidator = new();
    
    private bool _saving = false;
    
    private bool IsNewReferral => Model.Id == Guid.Empty;

    protected override void OnInitialized()
    {
        // Set the CustomerId on the model if provided
        if (CustomerId != Guid.Empty && Model.CustomerId == Guid.Empty)
        {
            Model.CustomerId = CustomerId;
        }
        
        // Initialize Details if it doesn't exist
        if (Model.Details == null)
        {
            Model.Details = ReferralDetailsFactory.Create(Model.ReferralType);
        }
    }

    private void OnReferralTypeChanged(ReferralTypeEnum newType)
    {
        Model.ReferralType = newType;
        
        // Create new details object for the selected type
        Model.Details = ReferralDetailsFactory.Create(newType);
        
        // Set the ReferralId on the new details object
        if (Model.Details != null && Model.Id != Guid.Empty)
        {
            Model.Details.ReferralId = Model.Id;
        }
        
        StateHasChanged();
    }

    private async Task HandleDetailsUpdate<T>(T detailsModel) where T : class
    {
        // Update the main model's details with the updated details
        Model.Details = detailsModel as IReferralDetailsDto;
        
        // Update the main model properties from the details if needed
        if (Model.Details != null)
        {
            Model.Details.ReferralId = Model.Id;
        }
        
        // Call the original save logic
        await Save();
    }

    private async Task Save()
    {
        // Only validate the main form if we're using the fallback form- why u
        if (form != null && (Model.ReferralType == ReferralTypeEnum.PphaForm_ClinStudent || 
                           Model.ReferralType == ReferralTypeEnum.PphaForm_ClinWorker ||
                           Model.ReferralType == ReferralTypeEnum.PphaForm_ManWorker ||
                           Model.ReferralType == ReferralTypeEnum.PphaClinFitnessCertificate ||
                           Model.ReferralType == ReferralTypeEnum.StudentClinFitnessCertificate))
        {
            await form.Validate();
            if (!form.IsValid)
            {
                Snackbar.Add("Please correct the validation errors before submitting.", MudBlazor.Severity.Error);
                return;
            }
        }
        
        _saving = true;
        StateHasChanged();
        
        try
        {
            if (IsNewReferral)
            {
                await ReferralLookupService.AddItem(Model, CancellationToken.None);
                Snackbar.Add("Referral submitted successfully!", MudBlazor.Severity.Success);
                
                // Notify parent component
                if (OnSubmitComplete.HasDelegate)
                {
                    await OnSubmitComplete.InvokeAsync(Model);
                }
            }
            else
            {
                await ReferralLookupService.UpdateItem(Model, CancellationToken.None);
                Snackbar.Add("Referral updated successfully!", MudBlazor.Severity.Success);
                
                // Notify parent component
                if (OnSaveComplete.HasDelegate)
                {
                    await OnSaveComplete.InvokeAsync(Model);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save referral: {ex.Message}", MudBlazor.Severity.Error);
            Console.Error.WriteLine($"Error saving referral: {ex}");
        }
        finally
        {
            _saving = false;
            StateHasChanged();
        }
    }

    private async Task Clear()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Clear Form",
            "Are you sure you want to clear all form data? This action cannot be undone.",
            yesText: "Clear", cancelText: "Cancel");
        
        if (result == true)
        {
            Model = new ReferralDto();
            Model.Details = ReferralDetailsFactory.Create(Model.ReferralType);
            form.ResetValidation();
            Snackbar.Add("Form cleared.", MudBlazor.Severity.Info);
        }
    }
}