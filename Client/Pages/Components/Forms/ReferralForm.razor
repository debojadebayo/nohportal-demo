@page "/referrals/new"
@using Shared.DTOs.Scheduling
@using Shared.DTOs.CRM
@using Shared.Validators
@using Shared.Enums
@using Shared.Factories.Scheduling
@using FluentValidation
@using MudBlazor
@using ComposedHealthBase.BaseClient.Services
@using ComposedHealthBase.BaseClient.Components
@using ComposedHealthBase.BaseClient.Enums
@using ComposedHealthBase.Shared.DTOs
@using Client.Pages.Components.Forms.ReferralDetailsForms
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILazyLookupService<ReferralDto> ReferralLookupService
@inject ILazyLookupService<ManagerDto> ManagerLookupService
@inject ILazyLookupService<EmployeeDto> EmployeeLookupService
@inject ILazyLookupService<CustomerDto> CustomerLookupService
@inject ReferralValidator referralValidator

<!-- Referral Type Selection -->
<MudExpansionPanels MultiExpansion="true" Elevation="2" Class="mb-4">
    <MudExpansionPanel Expanded="true">
        <TitleContent>
            <div class="d-flex">
                <MudIcon Icon="@Icons.Material.Filled.Category" Class="mr-3" />
                <MudText>Referral Type</MudText>
            </div>
        </TitleContent>
        <ChildContent>
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudSelect Value="Model.ReferralType" For="@(() => Model.ReferralType)" 
                        Label="Select Referral Type" Variant="Variant.Outlined" 
                        ValueChanged="@OnReferralTypeChanged"
                        T="ReferralTypeEnum">
                        <MudSelectItem Value="ReferralTypeEnum.CaseReferral">Case Referral</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_Admin">PPHA Form - Administrative or Office Worker </MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_Student">PPHA Form - Student</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_ClinStudent">PPHA Form - Clinical Student</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_ClinWorker">PPHA Form - Clinical Worker</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaForm_ManWorker">PPHA Form - Manual or Safety Critical Worker</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaFitnessCertificate">PPHA Fitness Certificate</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.PphaClinFitnessCertificate">PPHA Clinical Fitness Certificate</MudSelectItem>
                        <MudSelectItem Value="ReferralTypeEnum.StudentClinFitnessCertificate">Student Clinical Fitness Certificate</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

<!-- Render appropriate form based on referral type -->
@{
    RenderFragment formContent;
    
    // Ensure we have details for the current referral type
    if (Model.Details == null || !IsCorrectDetailsType(Model.Details, Model.ReferralType))
    {
        Model.Details = ReferralDetailsFactory.Create(Model.ReferralType);
        if (Model.Details != null && Model.Id != Guid.Empty)
        {
            Model.Details.ReferralId = Model.Id;
        }
    }
    
    switch (Model.ReferralType)
    {
        case ReferralTypeEnum.CaseReferral:
            var caseDetails = Model.Details as CaseReferralDetailsDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.CaseReferral) as CaseReferralDetailsDto;
            if (caseDetails != null)
            {
                formContent = @<CaseReferralForm Model="caseDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.PphaForm_Admin:
            var adminDetails = Model.Details as PphaFormAdminDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.PphaForm_Admin) as PphaFormAdminDto;
            if (adminDetails != null)
            {
                formContent = @<PphaAdminForm Model="adminDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.PphaForm_Student:
            var studentDetails = Model.Details as PphaFormStudentDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.PphaForm_Student) as PphaFormStudentDto;
            if (studentDetails != null)
            {
                formContent = @<PphaStudentForm Model="studentDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.PphaForm_ClinStudent:
            var clinStudentDetails = Model.Details as PphaFormClinStudentDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.PphaForm_ClinStudent) as PphaFormClinStudentDto;
            if (clinStudentDetails != null)
            {
                formContent = @<PphaFormClinStudentForm Model="clinStudentDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.PphaForm_ClinWorker:
            var clinWorkerDetails = Model.Details as PphaFormClinWorkerDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.PphaForm_ClinWorker) as PphaFormClinWorkerDto;
            if (clinWorkerDetails != null)
            {
                formContent = @<PphaFormClinWorkerForm Model="clinWorkerDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.PphaForm_ManWorker:
            var manWorkerDetails = Model.Details as PphaFormManWorkerDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.PphaForm_ManWorker) as PphaFormManWorkerDto;
            if (manWorkerDetails != null)
            {
                formContent = @<PphaFormManWorkerForm Model="manWorkerDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.PphaFitnessCertificate:
            var fitnessDetails = Model.Details as PphaFitnessCertificateDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.PphaFitnessCertificate) as PphaFitnessCertificateDto;
            if (fitnessDetails != null)
            {
                formContent = @<PphaFitnessCertificateForm Model="fitnessDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.PphaClinFitnessCertificate:
            var clinFitnessDetails = Model.Details as PphaClinFitnessCertificateDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.PphaClinFitnessCertificate) as PphaClinFitnessCertificateDto;
            if (clinFitnessDetails != null)
            {
                formContent = @<PphaClinFitnessCertificateForm Model="clinFitnessDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        case ReferralTypeEnum.StudentClinFitnessCertificate:
            var studentClinFitnessDetails = Model.Details as StudentClinFitnessCertificateDto ?? ReferralDetailsFactory.Create(ReferralTypeEnum.StudentClinFitnessCertificate) as StudentClinFitnessCertificateDto;
            if (studentClinFitnessDetails != null)
            {
                formContent = @<StudentClinFitnessCertificateForm Model="studentClinFitnessDetails" CustomerId="CustomerId" />;
            }
            else
            {
                formContent = CreateDefaultFormContent();
            }
            break;

        default:
            formContent = CreateDefaultFormContent();
            break;
    }
}

@formContent

<MudForm @ref="form" Model="Model" Validation="@referralValidator.ValidateValue" ValidationDelay="0">
    <!-- Action Buttons -->
    <MudCardActions Class="mt-4">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
            OnClick="@(async () => await Save())" 
            Disabled="@_saving"
            Class="ml-auto">
            @if (_saving)
            {
                <MudProgressCircular Color="Color.Default" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ml-2">@(IsNewReferral ? "Submitting..." : "Updating...")</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Save" Class="mr-2" />
                <MudText>@(IsNewReferral ? "Submit Referral" : "Update Referral")</MudText>
            }
        </MudButton>
    </MudCardActions>
</MudForm>

@code {
    [Parameter] public ReferralDto Model { get; set; } = new();
    [Parameter] public EventCallback<ReferralDto> OnSaveComplete { get; set; }
    [Parameter] public EventCallback<ReferralDto> OnSubmitComplete { get; set; }
    [Parameter] public Guid CustomerId { get; set; } = Guid.Empty;
    [Parameter] public bool ShowAsDialog { get; set; } = false;

    private MudForm form = new();
    private ReferralDetailsValidator formDataValidator = new();
    
    private bool _saving = false;
    
    private bool IsNewReferral => Model.Id == Guid.Empty;

    protected override void OnInitialized()
    {
        // Set the CustomerId on the model if provided
        if (CustomerId != Guid.Empty && Model.CustomerId == Guid.Empty)
        {
            Model.CustomerId = CustomerId;
        }
        
        // Always ensure we have valid Details for the current ReferralType
        // This handles cases where Details is null from the server
        if (Model.Details == null || !IsCorrectDetailsType(Model.Details, Model.ReferralType))
        {
            Model.Details = ReferralDetailsFactory.Create(Model.ReferralType);
            
            // Set the ReferralId if this is an existing referral
            if (Model.Details != null && Model.Id != Guid.Empty)
            {
                Model.Details.ReferralId = Model.Id;
            }
        }
        else if (Model.Details != null && Model.Id != Guid.Empty)
        {
            // Ensure ReferralId is set even if Details already exists
            Model.Details.ReferralId = Model.Id;
        }
    }

    private bool IsCorrectDetailsType(IReferralDetailsDto details, ReferralTypeEnum referralType)
    {
        return referralType switch
        {
            ReferralTypeEnum.CaseReferral => details is CaseReferralDetailsDto,
            ReferralTypeEnum.PphaForm_Admin => details is PphaFormAdminDto,
            ReferralTypeEnum.PphaForm_Student => details is PphaFormStudentDto,
            ReferralTypeEnum.PphaForm_ClinStudent => details is PphaFormClinStudentDto,
            ReferralTypeEnum.PphaForm_ClinWorker => details is PphaFormClinWorkerDto,
            ReferralTypeEnum.PphaForm_ManWorker => details is PphaFormManWorkerDto,
            ReferralTypeEnum.PphaFitnessCertificate => details is PphaFitnessCertificateDto,
            ReferralTypeEnum.PphaClinFitnessCertificate => details is PphaClinFitnessCertificateDto,
            ReferralTypeEnum.StudentClinFitnessCertificate => details is StudentClinFitnessCertificateDto,
            _ => false
        };
    }

    private void OnReferralTypeChanged(ReferralTypeEnum newType)
    {
        Model.ReferralType = newType;
        
        // Create new details object for the selected type
        Model.Details = ReferralDetailsFactory.Create(newType);
        
        // Set the ReferralId on the new details object
        if (Model.Details != null && Model.Id != Guid.Empty)
        {
            Model.Details.ReferralId = Model.Id;
        }
        
        StateHasChanged();
    }

    private async Task Save()
    {
        await form.Validate();
        if (!form.IsValid)
        {
            Snackbar.Add("Please correct the validation errors before submitting.", MudBlazor.Severity.Error);
            return;
        }
        
        _saving = true;
        StateHasChanged();
        
        try
        {
            if (IsNewReferral)
            {
                await ReferralLookupService.AddItem(Model, CancellationToken.None);
                Snackbar.Add("Referral submitted successfully!", MudBlazor.Severity.Success);
                
                // Notify parent component
                if (OnSubmitComplete.HasDelegate)
                {
                    await OnSubmitComplete.InvokeAsync(Model);
                }
            }
            else
            {
                await ReferralLookupService.UpdateItem(Model, CancellationToken.None);
                Snackbar.Add("Referral updated successfully!", MudBlazor.Severity.Success);
                
                // Notify parent component
                if (OnSaveComplete.HasDelegate)
                {
                    await OnSaveComplete.InvokeAsync(Model);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to save referral: {ex.Message}", MudBlazor.Severity.Error);
            Console.Error.WriteLine($"Error saving referral: {ex}");
        }
        finally
        {
            _saving = false;
            StateHasChanged();
        }
    }

    private async Task Clear()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Clear Form",
            "Are you sure you want to clear all form data? This action cannot be undone.",
            yesText: "Clear", cancelText: "Cancel");
        
        if (result == true)
        {
            Model = new ReferralDto();
            Model.Details = ReferralDetailsFactory.Create(Model.ReferralType);
            form.ResetValidation();
            Snackbar.Add("Form cleared.", MudBlazor.Severity.Info);
        }
    }

    private RenderFragment CreateDefaultFormContent()
    {
        return @<MudExpansionPanels MultiExpansion="true" Elevation="2" Class="mb-4">
            <MudExpansionPanel Expanded="true">
                <TitleContent>
                    <div class="d-flex">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-3" />
                        <MudText>Form Ready</MudText>
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.body1" Class="mb-3">
                                The form for this referral type will be displayed here. If you're seeing this message, 
                                the specific form component may not be available yet.
                            </MudText>
                            <MudAlert Severity="MudBlazor.Severity.Info" Class="mt-2">
                                You can still save this referral. The detailed form will be available when the component is implemented.
                            </MudAlert>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudExpansionPanels>;
    }
}