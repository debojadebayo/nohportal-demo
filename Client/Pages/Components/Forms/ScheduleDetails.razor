@namespace Client.Pages.Forms
@using Client.Pages.Components.TabComponents
@using ComposedHealthBase.BaseClient.Components
@using ComposedHealthBase.BaseClient.Enums
@using MudBlazor
@using Shared.DTOs.CRM
@using Shared.DTOs.Scheduling
@using Shared.Validators
@inject IHttpClientFactory HttpClientFactory

<MudDialog Options="_dialogOptions">
    <DialogContent>
        <MudPaper Class="overflow-scroll" Style="max-height: 400px;">
            <MudGrid Justify="Justify.Center">
                <MudItem>
                    <ReferralsTab Referrals="Referrals" AppointmentMode="true" OnSelectForAppointment="PopulateAppointmentFromReferral" />
                </MudItem>
            </MudGrid>
        </MudPaper>
        
        <MudForm Model="@model" @ref="@form" Validator="@(scheduleValidator.ValidateValue)" ValidationDelay="0">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField T="string" Label="Appointment Title" @bind-Value="model.Title" For="@(() => model.Title)" />
                    <MudTextField T="string" Label="Appointment Description" @bind-Value="model.Description" For="@(() => model.Description)" />
                    <LazyLookup TDto="EmployeeDto" FieldType="LazyLookupEnum.Search"
                            @bind-ItemId="model.EmployeeId" Label="Employee" ItemIdValueExpression="@(() => model.EmployeeId)" />
                    <LazyLookup TDto="CustomerDto" FieldType="LazyLookupEnum.Search"
                            @bind-ItemId="model.CustomerId" Label="Customer" ItemIdValueExpression="@(() => model.CustomerId)" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <LazyLookup TDto="ClinicianDto" FieldType="LazyLookupEnum.Search"
                        @bind-ItemId="model.ClinicianId" Label="Clinician" ItemIdValueExpression="@(() => model.ClinicianId)" />
                    <LazyLookup TDto="ProductDto" FieldType="LazyLookupEnum.Select"
                        @bind-ItemId="model.ProductId" Label="Product" TenantConstraint="model.CustomerId" ItemIdValueExpression="@(() => model.ProductId)" />
                    <MudDatePicker @bind-Date="@SelectedDate" DateFormat="dd/MM/yyyy" Label="Appointment Date" Variant="Variant.Outlined" />
                    <div class="d-flex gap-4">
                        <MudTimePicker Label="Start Time" @bind-Time="StartTime" Variant="Variant.Outlined" />
                        <MudTimePicker Label="End Time" @bind-Time="EndTime" Variant="Variant.Outlined" />
                    </div>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Inject]
    private IDialogService DialogService { get; set; } = default!;
    private DialogOptions _dialogOptions = new() { FullScreen = true };
    private MudForm? form;
    
    // Validator instance
    private ScheduleValidator scheduleValidator = new ScheduleValidator();
    
    [Parameter]
    public ScheduleDto model { get; set; } = new ScheduleDto
    {
        Title = string.Empty,
        Description = string.Empty
    };
    [Parameter]
    public IEnumerable<ClinicianDto> Clinicians { get; set; } = new List<ClinicianDto>();
    [Parameter]
    public IEnumerable<ReferralDto> Referrals { get; set; } = new List<ReferralDto>();

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = default!;
    private DateTime? SelectedDate { get; set; }
    private TimeSpan? StartTime { get; set; }
    private TimeSpan? EndTime { get; set; }

    public ReferralDto? SelectedReferral { get; set; }

    protected override void OnInitialized()
    {
        if (model.StartTime.HasValue)
        {
            SelectedDate = model.StartTime.Value.Date;
            StartTime = model.StartTime.Value.TimeOfDay;
        }
        if (model.EndTime.HasValue)
        {
            EndTime = model.EndTime.Value.TimeOfDay;
        }
    }

    private async Task Submit()
    {
        if (form is null) return;

        if (SelectedDate.HasValue)
        {
            model.StartTime = StartTime.HasValue ? SelectedDate.Value.Add(StartTime.Value) : null;
            model.EndTime = EndTime.HasValue ? SelectedDate.Value.Add(EndTime.Value) : null;
        }else
        {
            return;
        }

        await form.Validate();
        if (form.IsValid)
        {
            MudDialog?.Close(DialogResult.Ok(model));
        }
    }
    private void Cancel() => MudDialog?.Cancel();
    private void PopulateAppointmentFromReferral(ReferralDto referral)
    {
        model.ReferralId = referral.Id;
        model.Title = referral.Title;
        model.Description = referral.ReferralDetails;
        model.EmployeeId = referral.EmployeeId;
        model.CustomerId = referral.CustomerId;
    }
}
