@namespace Client.Pages.Components.Forms
@using Shared.DTOs.CRM
@using Shared.Validators
@using Shared.DTOs.Auth
@using ComposedHealthBase.BaseClient.Services
@inject ILazyLookupService<ManagerDto> ManagerLookupService
@inject IAuthHelperService AuthHelperService
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudForm Model="@Manager" @ref="@form" Validation="@(managerValidator.ValidateValue)" ValidationDelay="0">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Manager.FirstName" For="@(() => Manager.FirstName)" Immediate="true" Label="First Name" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="Manager.LastName" For="@(() => Manager.LastName)" Immediate="true" Label="Last Name" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="Manager.Telephone" For="@(() => Manager.Telephone)" Immediate="true" Label="Phone Number" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Manager.Email" For="@(() => Manager.Email)" Immediate="true" Label="Email" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="Manager.Department" For="@(() => Manager.Department)" Immediate="true" Label="Department" Variant="Variant.Outlined" />
                    <MudSwitch @bind-Value="Manager.IsActive" Label="Active" Color="Color.Primary" />
                    @if (isAuthorizedForRoleManagement && roles.Any())
                    {
                        <MudSelect T="string" @bind-Value="Manager.RoleName" Label="Role" Variant="Variant.Outlined" For="@(() => Manager.RoleName)">
                            @foreach (var role in roles)
                            {
                                <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                            }
                        </MudSelect>
                    }
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">@(IsNewManager ? "Create" : "Update")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public ManagerDto Manager { get; set; } = default!;
    [Parameter] public bool IsNewManager { get; set; }

    MudForm form = default!;
    private ManagerValidator managerValidator = new ManagerValidator();
    private List<RoleDto> roles = new();
    private bool isAuthorizedForRoleManagement = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorizationAndLoadRoles();
    }

    private async Task CheckAuthorizationAndLoadRoles()
    {
        isAuthorizedForRoleManagement = await AuthHelperService.IsAuthorizedForRoleManagement();
        
        if (isAuthorizedForRoleManagement)
        {
            try
            {
                roles = await Http.GetFromJsonAsync<List<RoleDto>>("api/auth/roles/getall") ?? new();
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error loading roles: {ex.Message}");
                roles = new();
            }
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                if (IsNewManager)
                {
                    var createdManager = await AuthHelperService.CreateSubject<ManagerDto>(Manager, CancellationToken.None);
                    if (createdManager != null)
                    {
                        MudDialog.Close(DialogResult.Ok(createdManager));
                    }
                }
                else
                {
                    await ManagerLookupService.UpdateItem(Manager, CancellationToken.None);
                    MudDialog.Close(DialogResult.Ok(Manager));
                }
            }
            catch (Exception ex)
            {
                // Handle error - could add a snackbar here
                Console.Error.WriteLine($"Error saving manager: {ex.Message}");
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
