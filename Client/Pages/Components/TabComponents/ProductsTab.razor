@namespace Client.Pages.Components.TabComponents
@using ComposedHealthBase.BaseClient.Components
@using ComposedHealthBase.BaseClient.Enums
@using Shared.DTOs.CRM
@using Shared.Validators
@using MudBlazor

<MudPaper Class="pa-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
        <MudText Typo="Typo.h6">Products</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowAddProductDialog"
            StartIcon="@Icons.Material.Filled.Add">Add Product</MudButton>
    </MudStack>
    <MudDataGrid T="ProductDto" Items="Products ?? new List<ProductDto>()" Dense="true" Hover="true" Striped="true"
        Bordered="true" Filterable="true">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Product ID" />
            <TemplateColumn>
                <HeaderTemplate>
                    <MudText Typo="Typo.subtitle2">Product Type</MudText>
                </HeaderTemplate>
                <CellTemplate>
                    <MudText>@context.Item.ProductType?.DisplayName</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Price" Title="Price" />
            <PropertyColumn Property="x => x.StartTime" Title="Start Date" />
            <PropertyColumn Property="x => x.EndTime" Title="End Date" />
        </Columns>
        <NoRecordsContent>
            <MudText>No products found.</MudText>
        </NoRecordsContent>
    </MudDataGrid>
</MudPaper>

<MudDialog @bind-Visible="_addProductDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Add New Product</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="productForm" Model="NewProduct" Validation="@(productValidator.ValidateValue)" ValidationDelay="0">
            <MudSelect T="ProductTypeDto" Label="Product Type" @bind-Value="_selectedProductType" For="@(() => NewProduct.ProductType)">
                @foreach (var pt in ProductTypes)
                {
                    <MudSelectItem Value="pt">@pt.DisplayName</MudSelectItem>
                }
            </MudSelect>
            <MudNumericField @bind-Value="NewProduct.Price" Label="Price" Variant="Variant.Outlined" For="@(() => NewProduct.Price)" />
            <MudDatePicker @bind-Date="NewProduct.StartTime" DateFormat="dd/MM/yyyy" Label="Start Date" For="@(() => NewProduct.StartTime)" />
            <MudDatePicker @bind-Date="NewProduct.EndTime" DateFormat="dd/MM/yyyy" Label="End Date" For="@(() => NewProduct.EndTime)" />
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="AddProduct">Add Product</MudButton>
        <MudButton OnClick="CancelProduct">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public IEnumerable<ProductDto> Products { get; set; } = new List<ProductDto>();
    [Parameter] public IEnumerable<ProductTypeDto> ProductTypes { get; set; } = new List<ProductTypeDto>();
    [Parameter] public EventCallback<ProductDto> OnProductSave { get; set; }
    [Parameter] public EventCallback OnProductCancel { get; set; }
    [Parameter] public ProductDto NewProduct { get; set; } = default!;
    [Parameter] public Guid CustomerId { get; set; } = Guid.Empty;
    
    private bool _addProductDialogOpen = false;
    private MudForm productForm = default!;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
    private ProductTypeDto? _selectedProductType { get; set; }
    
    // Validator instance
    private ProductValidator productValidator = new ProductValidator();

    private void ShowAddProductDialog()
    {
        _addProductDialogOpen = true;
    }

    private async Task AddProduct()
    {
        await productForm.Validate();
        if (!productForm.IsValid) return;
        
        if (_selectedProductType != null)
        {
            NewProduct.ProductType = _selectedProductType;
        }
        
        await OnProductSave.InvokeAsync(NewProduct);
        _addProductDialogOpen = false;
    }

    private async Task CancelProduct()
    {
        _addProductDialogOpen = false;
        if (OnProductCancel.HasDelegate)
            await OnProductCancel.InvokeAsync();
    }
}
