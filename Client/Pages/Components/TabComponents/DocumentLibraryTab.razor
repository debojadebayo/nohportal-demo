@namespace Client.Pages.Components.TabComponents
@using ComposedHealthBase.Shared.DTOs
@using MudBlazor
@inject IDialogService DialogService
@typeparam TDto where TDto : IDocumentDto

<MudPaper Class="pa-4">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-2">
        <MudText Typo="Typo.h6">Documents</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowDocumentUploadDialog"
            StartIcon="@Icons.Material.Filled.UploadFile">Upload New Document</MudButton>
    </MudStack>
    <MudTable T="TDto" Items="Documents ?? new List<TDto>()" Dense="true" Hover="true" Striped="true"
        Bordered="true">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>File Path</MudTh>
            <MudTh>Active</MudTh>
            <MudTh>Created By</MudTh>
            <MudTh>Created Date</MudTh>
            <MudTh>Modified By</MudTh>
            <MudTh>Modified Date</MudTh>
        </HeaderContent>
        <RowTemplate Context="docContext">
            @{
                var context = docContext;
            }
            <MudTd DataLabel="Name">@GetPropertyValue(context, "Name")</MudTd>
            <MudTd DataLabel="Description">@GetPropertyValue(context, "Description")</MudTd>
            <MudTd DataLabel="File Path">
                @{
                    var filePath = GetPropertyValue(context, "FilePath")?.ToString();
                }
                @if (!string.IsNullOrEmpty(filePath))
                {
                    <MudLink Href="@filePath" Target="_blank">View Document</MudLink>
                }
                else
                {
                    <MudText>No file available</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Active">@GetPropertyValue(context, "IsActive")</MudTd>
            <MudTd DataLabel="Created By">@GetPropertyValue(context, "CreatedBy")</MudTd>
            <MudTd DataLabel="Created Date">@FormatDate(GetPropertyValue(context, "CreatedDate"))</MudTd>
            <MudTd DataLabel="Modified By">@GetPropertyValue(context, "LastModifiedBy")</MudTd>
            <MudTd DataLabel="Modified Date">@FormatDate(GetPropertyValue(context, "ModifiedDate"))</MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No documents found.</MudText>
        </NoRecordsContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</MudPaper>

<MudDialog @bind-Visible="_uploadDocumentDialogOpen" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Upload New Document</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="_newDocumentName" Label="Document Name" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="_newDocumentDescription" Label="Description" Variant="Variant.Outlined" Lines="3" Class="mt-3" />
        <MudFileUpload T="IBrowserFile" FilesChanged="HandleFileSelected">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                    Select File  
                </MudButton>
            </ActivatorContent>
            <SelectedTemplate>
                @if (_fileToUpload != null)
                {
                    <MudText>@_fileToUpload.Name</MudText>
                }
                else
                {
                    <MudText>No File</MudText>
                }
            </SelectedTemplate>
        </MudFileUpload>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="UploadDocument" Disabled="_fileToUpload == null">Upload
        </MudButton>
        <MudButton OnClick="() => _uploadDocumentDialogOpen = false">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public List<TDto> Documents { get; set; } = new();
    [Parameter] public EventCallback<Tuple<IDocumentDto, IBrowserFile>> OnSave { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    private bool _uploadDocumentDialogOpen = false;
    private string _newDocumentName = "";
    private string _newDocumentDescription = "";
    private IBrowserFile? _fileToUpload;
    private DialogOptions _dialogOptions = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    private void ShowDocumentUploadDialog()
    {
        _newDocumentName = "";
        _newDocumentDescription = "";
        _fileToUpload = null;
        _uploadDocumentDialogOpen = true;
    }
    private void HandleFileSelected(IBrowserFile file)
    {
        _fileToUpload = file;
    }
    private async Task UploadDocument()
    {
        if (_fileToUpload != null)
        {
            var newDto = Activator.CreateInstance<TDto>();
            SetPropertyValue(newDto, "Name", _newDocumentName);
            SetPropertyValue(newDto, "Description", _newDocumentDescription);
            SetPropertyValue(newDto, "FilePath", "placeholder"); // or handle as needed
            await OnSave.InvokeAsync(new Tuple<IDocumentDto, IBrowserFile>(newDto!, _fileToUpload));
            _uploadDocumentDialogOpen = false;
        }
    }

    private object? GetPropertyValue(object obj, string propertyName)
    {
        return obj?.GetType().GetProperty(propertyName)?.GetValue(obj);
    }

    private void SetPropertyValue(object obj, string propertyName, object? value)
    {
        var prop = obj?.GetType().GetProperty(propertyName);
        if (prop != null && prop.CanWrite)
            prop.SetValue(obj, value);
    }

    private string? FormatDate(object? dateObj)
    {
        if (dateObj is DateTime dt)
            return dt.ToString("g");
        return null;
    }
}