@namespace Client.Pages.Components.TabComponents
@using Shared.DTOs.CRM
@using Shared.Validators
@using MudBlazor

<MudForm @ref="form" Model="Model" Validation="@(employeeValidator.ValidateValue)" ValidationDelay="0">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="Model.FirstName" For="@(() => Model.FirstName)" Immediate="true"
                Label="First Name" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.LastName" For="@(() => Model.LastName)" Immediate="true" Label="Last Name"
                Variant="Variant.Outlined" />
            <MudDatePicker @bind-Date="Model.DOB" DateFormat="dd/MM/yyyy" Label="Date of Birth" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.Address1" For="@(() => Model.Address1)" Immediate="true"
                Label="Address Line 1" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.Address2" For="@(() => Model.Address2)" Immediate="true"
                Label="Address Line 2" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.Address3" For="@(() => Model.Address3)" Immediate="true"
                Label="Address Line 3" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.Postcode" For="@(() => Model.Postcode)" Immediate="true" Label="Postcode"
                Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.Email" For="@(() => Model.Email)" Immediate="true" Label="Email"
                Variant="Variant.Outlined" />
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudTextField @bind-Value="Model.Telephone" For="@(() => Model.Telephone)" Immediate="true"
                Label="Telephone" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.Id" For="@(() => Model.Id)" Immediate="true" Label="Company ID"
                Variant="Variant.Outlined" />
            <MudAutocomplete T="CustomerDto" ToStringFunc="@ToStringFunc" Label="Company Name"
                @bind-Value="selectedCustomer" SearchFunc="@SearchFunc" Variant="Variant.Outlined"
                ShowProgressIndicator="true" ProgressIndicatorColor="Color.Default" />
            <MudTextField @bind-Value="Model.JobRole" For="@(() => Model.JobRole)" Immediate="true" Label="Job Role"
                Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.Department" For="@(() => Model.Department)" Immediate="true"
                Label="Department" Variant="Variant.Outlined" />
            <MudTextField @bind-Value="Model.LineManager" For="@(() => Model.LineManager)" Immediate="true"
                Label="Line Manager" Variant="Variant.Outlined" />
        </MudItem>
    </MudGrid>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Save())">
            Save Changes
        </MudButton>
    </MudCardActions>
</MudForm>

@code {
    [Parameter] public EmployeeDto Model { get; set; } = new EmployeeDto();
    [Parameter] public EventCallback<EmployeeDto> OnSave { get; set; }
    [Parameter] public EventCallback OnDelete { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public Func<string, CancellationToken, Task<IEnumerable<CustomerDto>>> SearchFunc { get; set; } = default!;
    [Parameter] public Func<CustomerDto, string> ToStringFunc { get; set; } = default!;
    [Parameter] public Dictionary<long, CustomerDto> CustomerList { get; set; } = default!;
    private CustomerDto? selectedCustomer
    {
        get
        {
            if (Model?.CustomerId != null && CustomerList.TryGetValue(Model.CustomerId, out var customer))
            {
                return customer;
            }
            return null;
        }
        set
        {
            if (value != null)
            {
                Model.CustomerId = value.Id;
            }
        }
    }

    private MudForm form = default!;
    private EmployeeValidator employeeValidator = new EmployeeValidator();

    private async Task Save()
    {
        await form.Validate();
        if (form.IsValid)
        {
            await OnSave.InvokeAsync(Model);
        }
    }

    private async Task Delete()
    {
        await OnDelete.InvokeAsync();
    }
}
