@using ComposedHealthBase.Shared.Interfaces
@using ComposedHealthBase.Shared.Models
@using Heron.MudCalendar
@using Shared.DTOs.Scheduling
@using Client.Pages.Components.Calendar
@typeparam TResource where TResource : ICalendarResource<TCalendarItem>
@typeparam TCalendarItem where TCalendarItem : BaseCalendarItem

<MudGrid>
    <MudItem xs="12">
        <MudButton OnClick="() => CurrentDay = DateTime.Today">Today</MudButton>
        <MudButton OnClick="() => PrevClicked()">Prev</MudButton>
        <MudButton OnClick="() => NextClicked()">Next</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.Day ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToDayView">Day</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.Week ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToWeekView">Week</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.WorkWeek ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToWorkWeekView">Workweek</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.Month ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToMonthView">Month</MudButton>
        <MudSelect MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" T="string"
            Label="Select Resources" MultiSelection="true" @bind-Value="_value"
            @bind-SelectedValues="_selectedResources">
            @foreach (var resource in Resources)
            {
                <MudSelectItem T="string" Value="@resource.AvatarTitle">@resource.AvatarTitle</MudSelectItem>
            }
        </MudSelect>
    </MudItem>
</MudGrid>
<div class="calendar-resource-group">
    @foreach (var resource in Resources.Where(r => _selectedResources.Contains(r.AvatarTitle)))
    {
        <div class="calendar-resource">
            <MudCard>
                <div class="calendar-resource-header">
                    <div class="calendar-resource-header-inner">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar>
                                    <MudImage Src="@resource.AvatarImage"></MudImage>
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@resource.AvatarTitle</MudText>
                                <MudText Typo="Typo.body2">@resource.AvatarDescription</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                    </div>
                </div>
                <MudCardContent>
                    <CustomMudCalendar Height=2000 CurrentDay=@CurrentDay ShowDay="CalendarView == CalendarView.Day"
                        ShowWeek="CalendarView == CalendarView.Week" ShowWorkWeek="CalendarView == CalendarView.WorkWeek"
                        ShowMonth="CalendarView == CalendarView.Month" ShowCurrentTime="true"
                        Items="@resource.CalendarItems" FirstDayOfWorkWeek="DayOfWeek.Monday"
                        FirstDayOfWeek="DayOfWeek.Monday" ShowToolbar="false" />
                </MudCardContent>
            </MudCard>
            
        </div>
    }
</div>

@code {
    [Parameter] public IEnumerable<TResource> Resources { get; set; }
    private DateTime CurrentDay = DateTime.Today;
    private CalendarView CalendarView { get; set; } = CalendarView.WorkWeek;

    private string _value = default;
    private IEnumerable<string> _selectedResources = new List<string>();

    protected override void OnInitialized()
    {

    }

    private void SwitchToDayView()
    {
        CalendarView = CalendarView.Day;
    }

    private void SwitchToWeekView()
    {
        CalendarView = CalendarView.Week;
    }

    private void SwitchToWorkWeekView()
    {
        CalendarView = CalendarView.WorkWeek;
    }

    private void SwitchToMonthView()
    {
        CalendarView = CalendarView.Month;
    }

    private void PrevClicked()
    {
        switch (CalendarView)
        {
            case CalendarView.Day:
                CurrentDay = CurrentDay.AddDays(-1);
                break;
            case CalendarView.Week:
                CurrentDay = CurrentDay.AddDays(-7);
                break;
            case CalendarView.WorkWeek:
                CurrentDay = CurrentDay.AddDays(-7);
                break;
            case CalendarView.Month:
                CurrentDay = CurrentDay.AddMonths(-1);
                break;
        }
    }

    private void NextClicked()
    {
        switch (CalendarView)
        {
            case CalendarView.Day:
                CurrentDay = CurrentDay.AddDays(1);
                break;
            case CalendarView.Week:
                CurrentDay = CurrentDay.AddDays(7);
                break;
            case CalendarView.WorkWeek:
                CurrentDay = CurrentDay.AddDays(7);
                break;
            case CalendarView.Month:
                CurrentDay = CurrentDay.AddMonths(1);
                break;
        }
    }
    private string GetMultiSelectionText(List<string> selectedValues)
    {
        return $"Selected clinicians: {(selectedValues.Count() == 0 ? "(None)" : string.Join(", ", selectedValues.Select(x => x)))}";
    }
}