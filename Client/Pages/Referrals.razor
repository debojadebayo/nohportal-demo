@page "/referrals"
@using Shared.DTOs.CRM
@using Shared.DTOs.Scheduling
@using Client.Pages.Components.TabComponents
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Referrals</PageTitle>

<MudText Typo="Typo.h1">Referrals</MudText>

<MudPaper Class="pa-4" Elevation="2">
    <ReferralsTab Referrals="referrals" OnSave="SaveReferral" />
</MudPaper>

@code {
    private List<ReferralDto> referrals = new();
    private HttpClient httpClient = default!;
    private bool isLoading = false;

    protected override void OnInitialized()
    {
        httpClient = HttpClientFactory.CreateClient("api");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadReferrals();
    }

    private async Task LoadReferrals()
    {
        isLoading = true;
        try
        {
            var result = await httpClient.GetFromJsonAsync<IEnumerable<ReferralDto>>("api/referral/getall");
            referrals = result?.ToList() ?? new List<ReferralDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load referrals: {ex.Message}", Severity.Error);
            referrals = new List<ReferralDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveReferral(ReferralDto referral)
    {
        isLoading = true;
        try
        {
            var response = await httpClient.PostAsJsonAsync("api/referral/create", referral);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Referral added successfully", Severity.Success);
                await LoadReferrals(); // Refresh the list
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to add referral: {response.StatusCode} - {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding referral: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}
