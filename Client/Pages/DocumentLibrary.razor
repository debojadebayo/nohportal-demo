@page "/document-library"
@using ComposedHealthBase.BaseClient.Services
@using Gotho.BlazorPdf
@using System.Collections.Generic
@using Shared.DTOs.CRM
@inject ILazyLookupService<DocumentDto> DocumentLookupService
@inject IDocumentUploadService DocumentUploadService

<MudText Typo="Typo.h1">Documents Library</MudText>
<MudGrid>
    <MudItem xs="12" sm="4" md="3">
        <MudPaper Class="pa-4" Elevation="1">
            <MudTextField T="string" @bind-Value="searchTerm" Placeholder="Search Document" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" />
            <MudList T="DocumentDto" Dense="true">
                @foreach (var doc in filteredDocuments)
                {
                    <MudListItem OnClick="() => OnDocumentSelected(doc)" Value="doc">@doc.Name</MudListItem>
                }
            </MudList>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="8" md="9">
        <MudPaper Class="pa-4" Elevation="1">
            @if (isLoading)
            {
                <MudProgressCircular Indeterminate="true" />
            }
            else if (!string.IsNullOrEmpty(documentUrl))
            {
                <PdfViewer Url="@documentUrl" />
            }
            else
            {
                <MudAlert Severity="Severity.Info">Select a document to view</MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string searchTerm = "";
    private string documentUrl = "";
    private bool isLoading = false;
    private List<DocumentDto> documents = new();

    protected override async Task OnInitializedAsync()
    {
        documents = (await DocumentLookupService.GetAllItems(CancellationToken.None)).ToList();
    }

    private IEnumerable<DocumentDto> filteredDocuments => 
        string.IsNullOrWhiteSpace(searchTerm) 
            ? documents 
            : documents.Where(d => d.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    private async Task OnDocumentSelected(DocumentDto document)
    {
        documentUrl = (await DocumentUploadService.GetSasLink(document.Id, CancellationToken.None)) ?? "";
    }
}