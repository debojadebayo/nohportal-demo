@page "/"
@using Client.Pages.Components
@using ComposedHealthBase.Shared.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Shared.DTOs.CRM
@using Client.Pages.Components.Calendar
@using Shared.DTOs.Scheduling
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService

<PageTitle>Diary</PageTitle>

<MudText Typo="Typo.h1">Diary</MudText>

<div style="display: flex; justify-content: flex-end; margin-bottom: 16px;">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddAppointmentModal">Add Appointment
    </MudButton>
</div>

<MultiResourceCalendar Resources="@Clinicians" TResource="ClinicianDto" TCalendarItem="ScheduleDto" />

<MudDialog @bind-IsOpen="_isModalOpen">
    <DialogContent>
        <MudText Typo="Typo.h6">@(_editingSchedule?.Id > 0 ? "Edit Appointment" : "Add Appointment")</MudText>
        <MudTextField @bind-Value="_editingSchedule.Title" Label="Title" />
        <MudTextField @bind-Value="_editingSchedule.Description" Label="Description" />
        <MudTextField @bind-Value="_editingSchedule.CustomerId" Label="Customer Id" />
        <MudTextField @bind-Value="_editingSchedule.ReferralId" Label="Referral Id" />
        <MudTextField @bind-Value="_editingSchedule.PatientId" Label="Patient Id" />
        <MudTextField @bind-Value="_editingSchedule.ClinicianId" Label="Clinician Id" />
        <MudDatePicker @bind-Date="_editingSchedule.Start" Label="Start" />
        <MudDatePicker @bind-Date="_editingSchedule.End" Label="End" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="SaveAppointment" Color="Color.Primary">Save</MudButton>
        <MudButton OnClick="CloseModal">Cancel</MudButton>
        @if (_editingSchedule?.Id > 0)
        {
            <MudButton OnClick="DeleteAppointment" Color="Color.Error">Delete</MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    private IEnumerable<ClinicianDto> Clinicians { get; set; } = new List<ClinicianDto>();
    private HttpClient? httpClient;

    private bool _isModalOpen = false;
    private ScheduleDto _editingSchedule = new ScheduleDto();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            httpClient = HttpClientFactory.CreateClient("api");
            var clinicians = await
            httpClient.GetFromJsonAsync<IEnumerable<ClinicianDto>>("api/clinician/getallclinicianswithschedules");
            Clinicians = clinicians ?? new List<ClinicianDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Clinician data: {ex.Message}");
        }
    }

    private async Task OpenAddAppointmentModal()
    {
        var newSchedule = new ScheduleDto
        {
            Start = DateTime.Now,
            End = DateTime.Now.AddHours(1)
        };
        var dialogReference = await DialogService.ShowAsync<ScheduleDetails>("Add Appointment", new DialogParameters
        {
            { nameof(ScheduleDetails.model), newSchedule }
        });
        var dialogResult = await dialogReference.Result;
        if (!dialogResult.Canceled && dialogResult.Data is ScheduleDto result)
        {
            // TODO: Add result to your list or send to server
            Console.WriteLine($"Received new appointment: {result.Title}");
        }
    }

    private void OnCalendarItemClick(ScheduleDto item)
    {
        _editingSchedule = new ScheduleDto
        {
            Id = item.Id,
            Title = item.Title,
            Description = item.Description,
            CustomerId = item.CustomerId,
            ReferralId = item.ReferralId,
            PatientId = item.PatientId,
            ClinicianId = item.ClinicianId,
            Start = item.Start,
            End = item.End
        };
        _isModalOpen = true;
    }

    private void CloseModal()
    {
        _isModalOpen = false;
    }

    private Task SaveAppointment()
    {
        _isModalOpen = false;
        return Task.CompletedTask;
    }

    private Task DeleteAppointment()
    {
        _isModalOpen = false;
        return Task.CompletedTask;
    }
}