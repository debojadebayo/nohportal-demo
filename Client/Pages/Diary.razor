@page "/"
@using Client.Pages.Components
@using Client.Pages.Components.Calendar.Events
@using ComposedHealthBase.Shared.Interfaces
@using Shared.DTOs.CRM
@using Client.Pages.Forms
@using Shared.DTOs.Scheduling
@using MudBlazor
@using Client.Pages.Components.Calendar
@inject IHttpClientFactory HttpClientFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [Authorize]

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudText Typo="Typo.h1">Diary</MudText>
    </MudItem>
    <MudItem xs="12" sm="6">
        <div class="d-flex justify-end mb-4">
            <MudButton variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenAddAppointmentModal()">Add Appointment
            </MudButton>
        </div>
    </MudItem>
</MudGrid>

<MultiResourceCalendar Resources="@Clinicians" TResource="ClinicianDto" TCalendarItem="ScheduleDto"
    CellClickedCallback="OnCellClicked" ItemClickedCallback="OnItemClicked" />

@code {
    private IEnumerable<ClinicianDto> Clinicians { get; set; } = new List<ClinicianDto>();
    private IEnumerable<ReferralDto> Referrals { get; set; } = new List<ReferralDto>();
    private HttpClient httpClient = default!;
    private ScheduleDto _editingSchedule = new ScheduleDto
    {
        Title = string.Empty,
        Description = string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("api");
        try
        {
            var clinicians = await httpClient.GetFromJsonAsync<IEnumerable<ClinicianDto>>("api/clinician/getall");
            Clinicians = clinicians ?? new List<ClinicianDto>();

            var referrals = await httpClient.GetFromJsonAsync<IEnumerable<ReferralDto>>("api/referral/getall");
            Referrals = referrals ?? new List<ReferralDto>();

            await LoadClinicians();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task OpenAddAppointmentModal(ScheduleDto? schedule = null)
    {
        var isEdit = schedule != null && schedule.Id > 0;
        if (schedule == null)
        {
            schedule = new ScheduleDto
            {
                Title = string.Empty,
                Description = string.Empty,
                Start = DateTime.UtcNow,
                End = DateTime.UtcNow.AddHours(1)
            };
        }

        var parameters = new DialogParameters
        {
            { "model", schedule! },
            { "Clinicians", Clinicians },
            { "Referrals", Referrals }
        };
        var dialogReference = await DialogService.ShowAsync<Forms.ScheduleDetails>(isEdit ? "Edit Appointment" : "Add Appointment", parameters);
        var dialogResult = await dialogReference.Result;

        if (dialogResult?.Data is ScheduleDto editedSchedule)
        {
            try
            {
                var response = isEdit
                    ? await httpClient.PutAsJsonAsync($"api/schedule/update", editedSchedule)
                    : await httpClient.PostAsJsonAsync("api/schedule/create", editedSchedule);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add(isEdit ? "Appointment updated successfully" : "Appointment created successfully", Severity.Success);
                    await LoadClinicians();
                }
                else
                {
                    Snackbar.Add($"Failed to {(isEdit ? "update" : "create")} appointment: {response.StatusCode}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error {(isEdit ? "updating" : "creating")} appointment: {ex.Message}", Severity.Error);
            }
        }
    }
    
    private async Task LoadClinicians()
    {
        var clinicians = await
        httpClient.GetFromJsonAsync<IEnumerable<ClinicianDto>>("api/clinician/getallclinicianswithschedules");
        Clinicians = clinicians ?? new List<ClinicianDto>();
    }

    private async Task OnCellClicked(CellClickedEventArgs<ClinicianDto, ScheduleDto> args)
    {
        var schedule = new ScheduleDto
        {
            StartTime = DateTime.SpecifyKind(args.DateTime, DateTimeKind.Utc),
            EndTime = DateTime.SpecifyKind(args.DateTime.AddMinutes(30), DateTimeKind.Utc),
            ClinicianId = args.Resource.Id,
            Title = string.Empty,
            Description = string.Empty
        };
        await OpenAddAppointmentModal(schedule);
    }
    private async Task OnItemClicked(ItemClickedEventArgs<ScheduleDto> args)
    {
        var schedule = args.Item;
        if (schedule != null)
        {
            await OpenAddAppointmentModal(schedule);
        }
    }
}
