@page "/"
@using Microsoft.AspNetCore.Authorization
@using Shared.DTOs.CRM
@inject IHttpClientFactory HttpClientFactory
@* @attribute [Authorize] *@

<PageTitle>CRM</PageTitle>

<MudText Typo="Typo.h1">Calendar</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudButton OnClick="() => CurrentDay = DateTime.Today">Today</MudButton>
        <MudButton OnClick="() => PrevClicked()">Prev</MudButton>
        <MudButton OnClick="() => NextClicked()">Next</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.Day ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToDayView">Day</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.Week ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToWeekView">Week</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.WorkWeek ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToWorkWeekView">Workweek</MudButton>
        <MudButton Variant="@(CalendarView == CalendarView.Month ? Variant.Filled : Variant.Outlined)"
            OnClick="SwitchToMonthView">Month</MudButton>
    </MudItem>
    @foreach (var resource in Resources)
    {
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudText Typo="Typo.h6">@resource.Name</MudText>
            <MudCalendar CurrentDay=@CurrentDay Height="2000" ShowDay="CalendarView == CalendarView.Day"
                ShowWeek="CalendarView == CalendarView.Week" ShowWorkWeek="CalendarView == CalendarView.WorkWeek"
                ShowMonth="CalendarView == CalendarView.Month" ShowCurrentTime="true" Items="@Events[resource.Name]" FirstDayOfWorkWeek="DayOfWeek.Monday" FirstDayOfWeek="DayOfWeek.Monday" ShowToolbar="false"/>
        </MudItem>
    }
</MudGrid>

@code {
private DateTime CurrentDay = DateTime.Today;

    private List<Resource> Resources { get; set; } = new List<Resource>()
{
new Resource { Name = "John", Date = DateTime.Now },
new Resource { Name = "Alice", Date = DateTime.Now.AddDays(1) },
new Resource { Name = "Bob", Date = DateTime.Now.AddDays(-1) },
new Resource { Name = "Potato", Date = DateTime.Now.AddDays(-1) },
};

    private Dictionary<string, List<CalendarItem>> Events { get; set; } = new Dictionary<string, List<CalendarItem>>{
{ "John", new List<CalendarItem> { new CalendarItem
{
Start = DateTime.Today.AddHours(10),
End = DateTime.Today.AddHours(11),
Text = "Event today"
},
new CalendarItem
{
Start = DateTime.Today.AddDays(1).AddHours(11),
End = DateTime.Today.AddDays(1).AddHours(12.5),
Text = "Event tomorrow"
} } },
{ "Alice", new List<CalendarItem> { new CalendarItem
{
Start = DateTime.Today.AddHours(10),
End = DateTime.Today.AddHours(11),
Text = "Event today"
},
new CalendarItem
{
Start = DateTime.Today.AddHours(11),
End = DateTime.Today.AddHours(12.5),
Text = "Event tomorrow"
} } },
{ "Bob", new List<CalendarItem> { new CalendarItem
{
Start = DateTime.Today.AddHours(10),
End = DateTime.Today.AddHours(11),
Text = "Event today"
},
new CalendarItem
{
Start = DateTime.Today.AddDays(1).AddHours(11),
End = DateTime.Today.AddDays(1).AddHours(12.5),
Text = "Event tomorrow"
} } },
{ "Potato", new List<CalendarItem> { new CalendarItem
{
Start = DateTime.Today.AddHours(10),
End = DateTime.Today.AddHours(11),
Text = "Event today"
},
new CalendarItem
{
Start = DateTime.Today.AddDays(1).AddHours(11),
End = DateTime.Today.AddDays(1).AddHours(12.5),
Text = "Event tomorrow"
}} }
};

    private CalendarView CalendarView { get; set; } = CalendarView.WorkWeek;

    private void OnDateChange(DateTime date, Resource resource)
    {
        resource.Date = date;
    }

    private void SwitchToDayView()
    {
        CalendarView = CalendarView.Day;
    }

    private void SwitchToWeekView()
    {
        CalendarView = CalendarView.Week;
    }

    private void SwitchToWorkWeekView()
    {
        CalendarView = CalendarView.WorkWeek;
    }

    private void SwitchToMonthView()
    {
        CalendarView = CalendarView.Month;
    }

    private void PrevClicked(){
        switch (CalendarView){
            case CalendarView.Day:
                CurrentDay = CurrentDay.AddDays(-1);
                break;
            case CalendarView.Week:
                CurrentDay = CurrentDay.AddDays(-7);
                break;
            case CalendarView.WorkWeek:
                CurrentDay = CurrentDay.AddDays(-7);
                break;
            case CalendarView.Month:
                CurrentDay = CurrentDay.AddMonths(-1);
                break;
        }
    }

    private void NextClicked(){
        switch (CalendarView){
            case CalendarView.Day:
                CurrentDay = CurrentDay.AddDays(1);
                break;
            case CalendarView.Week:
                CurrentDay = CurrentDay.AddDays(7);
                break;
            case CalendarView.WorkWeek:
                CurrentDay = CurrentDay.AddDays(7);
                break;
            case CalendarView.Month:
                CurrentDay = CurrentDay.AddMonths(1);
                break;
        }
    }

    public class Resource
    {
        public string Name { get; set; }
        public DateTime Date { get; set; }
    }
}