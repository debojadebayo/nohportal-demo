@page "/customers"
@using ComposedHealthBase.Shared.DTOs
@using Shared.DTOs.CRM
@using Shared.DTOs.Scheduling
@using MudBlazor
@using Client.Pages.Components.TabComponents
@using ComposedHealthBase.BaseClient.Components
@using ComposedHealthBase.BaseClient.Services
@inject ILazyLookupService<EmployeeDto> EmployeeLookupService
@inject ILazyLookupService<CustomerDto> CustomerLookupService
@inject ILazyLookupService<ManagerDto> ManagerLookupService
@inject ILazyLookupService<ScheduleDto> ScheduleLookupService
@inject ILazyLookupService<ReferralDto> ReferralLookupService
@inject ILazyLookupService<ContractDto> ContractLookupService
@inject ILazyLookupService<CustomerDocumentDto> DocumentLookupService
@inject ILazyLookupService<ProductDto> ProductLookupService
@inject ILazyLookupService<ProductTypeDto> ProductTypeLookupService

@attribute [Authorize]

<MudText Typo="Typo.h1">Customers</MudText>

<MudText Typo="Typo.body1">Select a customer to view details</MudText>
<LazyLookup TDto="CustomerDto" @bind-ItemId="selectedCustomerId" Label="Company Name" />
@if (selectedCustomer == null)
{
    <MudButton OnClick="CreateCustomer">Add New Customer</MudButton>
}

@if (selectedCustomer != null)
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="tabs">
        <MudTabPanel Text="Customers">
            <CustomerTab Model="selectedCustomer" OnSave="HandleCustomerSave" OnDelete="DeleteCustomer" />
        </MudTabPanel>
        <MudTabPanel Text="Appointments" OnClick="GetAllAppointmentsByCustomerId">
            <AppointmentsTab Appointments="appointments" />
        </MudTabPanel>
        <MudTabPanel Text="Referrals" OnClick="GetAllReferralsByCustomerId">
            <ReferralsTab Referrals="referrals" />
        </MudTabPanel>
        <MudTabPanel Text="Managers" OnClick="GetAllManagersByCustomerId">
            <ManagersTab Managers="managers" />
        </MudTabPanel>
        <MudTabPanel Text="Contracts" OnClick="GetAllContractsByCustomerId">
            <ContractsTab Contracts="contracts" OnContractSave="HandleContractSave" NewContract="newContract" />
        </MudTabPanel>
        <MudTabPanel Text="Services" OnClick="GetAllProductsByCustomerId">
            <ProductsTab Products="products" ProductTypes="productTypes" OnProductSave="HandleProductSave" NewProduct="newProduct" />
        </MudTabPanel>
        <MudTabPanel Text="Invoicing">
            <InvoicingTab />
        </MudTabPanel>
        <MudTabPanel Text="Documents" OnClick="GetAllDocumentsByCustomerId">
            <DocumentBrowser TDto="CustomerDocumentDto" Documents="documents" NewDocument="newDocument"
                OnSave="OnDocumentSave" />
        </MudTabPanel>
        <MudTabPanel Text="Reports">
            <ReportsTab />
        </MudTabPanel>
        <MudTabPanel Text="Notes">
            <NotesTab Model="selectedCustomer" OnSave="HandleCustomerSave" TDto="CustomerDto" />
        </MudTabPanel>
    </MudTabs>
}

@code {
    private MudTabs tabs = default!;
    private CustomerDto? selectedCustomer =>
    CustomerLookupService.ItemList.TryGetValue(selectedCustomerId, out var customer) ? customer : null;
    private long selectedCustomerId { get; set; } = 0;
    private List<ScheduleDto> appointments = new();
    private List<ReferralDto> referrals = new();
    private List<ContractDto> contracts = new();
    private List<ProductDto> products = new();
    private List<ManagerDto> managers = new();
    private List<ProductTypeDto> productTypes = new();
    private List<CustomerDocumentDto> documents = new();
    private CustomerDocumentDto newDocument = default!;
    private ContractDto newContract = default!;
    private ProductDto newProduct = default!;
    private void CreateCustomer()
    {
        CustomerLookupService.ItemList.TryAdd(0, new CustomerDto());
        selectedCustomerId = 0;
    }
    private async Task HandleCustomerSave()
    {
        if (selectedCustomer == null) return;
        if (selectedCustomer.Id == 0)
        {
            await CustomerLookupService.AddItem(selectedCustomer, CancellationToken.None);
        }
        else
        {
            await CustomerLookupService.UpdateItem(selectedCustomer, CancellationToken.None);
        }
    }
    async Task DeleteCustomer()
    {
        if (selectedCustomer == null) return;
        await CustomerLookupService.DeleteItem(selectedCustomer.Id, CancellationToken.None);
    }
    private async Task GetAllAppointmentsByCustomerId()
    {
        if (selectedCustomer == null) return;
        appointments = (await ScheduleLookupService.GetAllByTenantId(selectedCustomer.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllReferralsByCustomerId()
    {
        if (selectedCustomer == null) return;
        referrals = (await ReferralLookupService.GetAllByTenantId(selectedCustomer.Id, CancellationToken.None)).ToList();
    }
    private async Task GetAllManagersByCustomerId()
    {
        if (selectedCustomer == null) return;
        managers = (await ManagerLookupService.GetAllByTenantId(selectedCustomer.Id, CancellationToken.None)).ToList();
    }

    private async Task GetAllContractsByCustomerId()
    {
        if (selectedCustomer == null) return;
        contracts = (await ContractLookupService.GetAllByTenantId(selectedCustomer.Id, CancellationToken.None)).ToList();
        newContract = new ContractDto
        {
            Reference = "",
            CustomerId = selectedCustomer.Id
        };
    }

    private async Task GetAllProductsByCustomerId()
    {
        if (selectedCustomer == null) return;
        products = (await ProductLookupService.GetAllByTenantId(selectedCustomer.Id, CancellationToken.None)).ToList();
        productTypes = (await ProductTypeLookupService.GetAllItems(CancellationToken.None)).ToList();
        newProduct = new ProductDto
        {
            ProductType = new ProductTypeDto{ Id = 0, Name = "Select Product Type", Description = "", ChargeCode = "" },
            CustomerId = selectedCustomer.Id
        };
    }
    private async Task GetAllDocumentsByCustomerId()
    {
        if (selectedCustomer == null) return;
        documents = (await DocumentLookupService.GetAllByTenantId(selectedCustomer.Id, CancellationToken.None)).ToList();
        var creators = documents.Select(d => d.CreatedBy).Distinct().ToList();
        newDocument = new CustomerDocumentDto
        {
            CustomerId = selectedCustomer.Id,
            Name = "",
            FilePath = ""
        };
    }
    private async Task OnDocumentSave()
    {
        await GetAllDocumentsByCustomerId();
    }

    private async Task HandleContractSave(ContractDto contract)
    {
        if (contract == null) return;
        if (contract.Id == 0)
        {
            await ContractLookupService.AddItem(contract, CancellationToken.None);
        }
        else
        {
            await ContractLookupService.UpdateItem(contract, CancellationToken.None);
        }
        await GetAllContractsByCustomerId();
    }

    private async Task HandleContractCancel()
    {
        await GetAllContractsByCustomerId();
    }

    private async Task HandleProductSave(ProductDto product)
    {
        if (product == null) return;
        if (product.Id == 0)
        {
            await ProductLookupService.AddItem(product, CancellationToken.None);
        }
        else
        {
            await ProductLookupService.UpdateItem(product, CancellationToken.None);
        }
        await GetAllProductsByCustomerId();
    }

    private async Task HandleProductCancel()
    {
        await GetAllProductsByCustomerId();
    }
}