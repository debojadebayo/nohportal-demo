@page "/customers"
@using Shared.DTOs.CRM
@using Shared.DTOs.Scheduling
@using MudBlazor
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

@using Client.Pages.Components.Customers
<h1>Customers</h1>

<MudAutocomplete 
    T="CustomerDto" ToStringFunc="@CustomerToString"
    Label="Company Name" @bind-Value="selectedCustomer" SearchFunc="@Search" Variant="Variant.Outlined" ShowProgressIndicator="true" ProgressIndicatorColor="Color.Default" />

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
@if (selectedCustomer != null)
{
    <MudTabPanel Text="Customers">
        <CustomerTab Model="selectedCustomer" OnSave="HandleCustomerSave" OnDelete="DeleteCustomer" IsLoading="isLoading" />
    </MudTabPanel>
    <MudTabPanel Text="Appointments" OnClick="GetAllAppointmentsByCustomerId">
        <AppointmentsTab Appointments="appointments" />
    </MudTabPanel>
    <MudTabPanel Text="Referrals" OnClick="GetAllReferralsByCustomerId">
        <ReferralsTab Referrals="referrals" />
    </MudTabPanel>
    <MudTabPanel Text="Managers" OnClick="GetAllManagersByCustomerId">
        <ManagersTab Managers="managers" />
    </MudTabPanel>
    <MudTabPanel Text="Services" OnClick="GetAllProductsByCustomerId">
        <ServicesTab Products="products"
                    ProductTypes="productTypes"
                    OnAdd="ShowAddProductDialog"
                    OnEdit="EditProduct"
                    OnDelete="DeleteProduct"
                    OnSave="SaveProduct"
                    EditingProduct="editingProduct"
                    ProductDialogOpen="productDialogOpen"
                    SetProductDialogOpen="(v) => productDialogOpen = v" />
    </MudTabPanel>
    <MudTabPanel Text="Invoicing">
        <InvoicingTab />
    </MudTabPanel>
    <MudTabPanel Text="Documents" OnClick="GetAllDocumentsByCustomerId">
        <DocumentLibraryTab Documents="documents" />
    </MudTabPanel>
    <MudTabPanel Text="Reports">
        <ReportsTab />
    </MudTabPanel>
    <MudTabPanel Text="Notes">
        <NotesTab Notes="@selectedCustomer.Notes" OnSave="SaveNotes" />
    </MudTabPanel>
}
</MudTabs>

@code {
    private List<CustomerDto> customerList = new();
    private CustomerDto? selectedCustomer = null;
    private bool isLoading = false;
    private string? loadError;
    private HttpClient httpClient;
    private List<ScheduleDto> appointments = new();
    private List<ReferralDto> referrals = new();
    private List<ProductDto> services = new();
    private List<DocumentDto> documents = new();

    // Product dialog state
    private bool productDialogOpen = false;
    private ProductDto editingProduct = new();

    private string CustomerToString(CustomerDto? e) => e is null ? string.Empty : $"{e.Name} - {e.Id}";

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("api");
        await LoadProductTypes();
    }

    private async Task<IEnumerable<CustomerDto>> Search(string value, CancellationToken token)
    {
        var result = await httpClient.GetFromJsonAsync<IEnumerable<CustomerDto>>("api/customer/search?term=" + value, token);
        customerList = result.ToList();
        return result;
    }

    // --- Customer CRUD ---
    private async Task HandleCustomerSave(CustomerDto customer)
    {
        isLoading = true;
        try
        {
            if (customer.Id == 0)
            {
                var response = await httpClient.PostAsJsonAsync("api/customer/update", customer);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Customer created.", Severity.Success);
                }
            }
            else
            {
                var response = await httpClient.PutAsJsonAsync($"api/customer/update", customer);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Customer updated.", Severity.Success);
                }
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteCustomer()
    {
        if (selectedCustomer == null) return;
        isLoading = true;
        try
        {
            var response = await httpClient.DeleteAsync($"api/customer/{selectedCustomer.Id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Customer deleted.", Severity.Success);
                selectedCustomer = null;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    // --- Appointments, Referrals, Managers ---
    private async Task GetAllAppointmentsByCustomerId()
    {
        if (selectedCustomer == null) return;
        var result = await httpClient.GetFromJsonAsync<IEnumerable<ScheduleDto>>($"api/schedule/GetAllByCustomerId/{selectedCustomer.Id}");
        appointments = result.ToList();
    }

    private async Task GetAllReferralsByCustomerId()
    {
        if (selectedCustomer == null) return;
        try
        {
            var result = await httpClient.GetFromJsonAsync<IEnumerable<ReferralDto>>($"api/referral/GetAllByCustomerId/{selectedCustomer.Id}");
            referrals = result?.ToList() ?? new List<ReferralDto>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load referrals: {ex.Message}", Severity.Error);
            referrals = new List<ReferralDto>();
        }
    }

    private async Task GetAllManagersByCustomerId()
    {
        if (selectedCustomer == null) return;
        var result = await httpClient.GetFromJsonAsync<IEnumerable<ManagerDto>>($"api/manager/GetAllByCustomerId/{selectedCustomer.Id}");
        managers = result.ToList();
    }

    // --- Services (Products) CRUD ---
    private async Task GetAllProductsByCustomerId()
    {
        if (selectedCustomer == null) return;
        var result = await httpClient.GetFromJsonAsync<IEnumerable<ProductDto>>($"api/product/GetAllByCustomerId/{selectedCustomer.Id}");
        products = result.ToList();
    }

    private async Task LoadProductTypes()
    {
        var result = await httpClient.GetFromJsonAsync<IEnumerable<ProductTypeDto>>("api/producttype");
        productTypes = result.ToList();
    }

    private void ShowAddProductDialog()
    {
        editingProduct = new ProductDto { ProductType = productTypes.FirstOrDefault() };
        productDialogOpen = true;
    }

    private void EditProduct(ProductDto product)
    {
        editingProduct = new ProductDto
        {
            Id = product.Id,
            ProductType = product.ProductType,
            Price = product.Price,
            StartTime = product.StartTime,
            EndTime = product.EndTime
        };
        productDialogOpen = true;
    }

    private async Task SaveProduct(ProductDto product)
    {
        if (selectedCustomer == null) return;
        productDialogOpen = false;
        product.ProductType = productTypes.FirstOrDefault(pt => pt.Id == product.ProductType.Id);

        if (product.Id == 0)
        {
            // Create
            var response = await httpClient.PostAsJsonAsync($"api/product?customerId={selectedCustomer.Id}", product);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Service added.", Severity.Success);
                await GetAllProductsByCustomerId();
            }
        }
        else
        {
            // Update
            var response = await httpClient.PutAsJsonAsync($"api/product/{product.Id}", product);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Service updated.", Severity.Success);
                await GetAllProductsByCustomerId();
            }
        }
    }

    private async Task DeleteProduct(ProductDto product)
    {
        if (product.Id == 0) return;
        var response = await httpClient.DeleteAsync($"api/product/{product.Id}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Service deleted.", Severity.Success);
            await GetAllProductsByCustomerId();
        }
    }

    // --- Documents ---
    private async Task GetAllDocumentsByCustomerId()
    {
        if (selectedCustomer == null) return;
        var result = await httpClient.GetFromJsonAsync<IEnumerable<DocumentDto>>($"api/document/GetAllByCustomerId/{selectedCustomer.Id}");
        documents = result.ToList();
    }

    // --- Notes ---
    private async Task SaveNotes()
    {
        if (selectedCustomer == null) return;
        var response = await httpClient.PutAsJsonAsync($"api/customer", selectedCustomer);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Notes saved.", Severity.Success);
        }
    }
}
