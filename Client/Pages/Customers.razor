@page "/customers"
@using Shared.DTOs.CRM
@using MudBlazor
@using Client.Pages.Forms
@inject IHttpClientFactory HttpClientFactory

<h1>Customers</h1>

<MudAutocomplete 
T="CustomerDto" ToStringFunc="@CustomerToString"
Label="Customer Name or DOB" @bind-Value="selectedCustomer" SearchFunc="@Search" Variant="Variant.Outlined" ShowProgressIndicator="true" ProgressIndicatorColor="Color.Default" />
    
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    @if (selectedCustomer != null)
    {
        <MudTabPanel Text="Customers">
            <CustomerDetails Model="selectedCustomer" OnSubmit="HandleSubmit"></CustomerDetails>
        </MudTabPanel>
        <MudTabPanel Text="Appointments">
            <MudText>Appointments Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Referrals">
            <MudText>Referrals Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Managers">
            <MudText>Managers Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Services">
            <MudText>Services Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Invoicing">
            <MudText>Invoicing Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Documents">
            <MudText>Documents Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Reports">
            <MudText>Reports Content</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Notes">
            <MudText>Notes Content</MudText>
        </MudTabPanel>
    }
</MudTabs>

@code {
    private string searchTerm;
    private List<CustomerDto> customerList = new();
    private CustomerDto? selectedCustomer = null;
    private bool isLoading = true;
    private string? loadError;
    private HttpClient httpClient;

    private string CustomerToString(CustomerDto? e)
    {
        return e is null ? string.Empty : $"{e.Name} - {e.Id}";
    }

    protected override async Task OnInitializedAsync()
    {
        httpClient = HttpClientFactory.CreateClient("api");
    }

    private async Task<IEnumerable<CustomerDto>> Search(string value, CancellationToken token)
    {
        var result = await httpClient.GetFromJsonAsync<IEnumerable<CustomerDto>>("api/customer/search?term=" + value, token);
        customerList.AddRange(result);
        return result;
    }

    private Task HandleSubmit(CustomerDto customer)
    {
        // Handle submit logic here (e.g., save customer)
        return Task.CompletedTask;
    }
}
