@namespace ComposedHealthBase.BaseClient.Components
@using ComposedHealthBase.BaseClient.Services
@using ComposedHealthBase.Shared.Interfaces
@using System.Linq.Expressions
@typeparam TDto where TDto : ILazyLookup
@inject ILazyLookupService<TDto> LookupService

@if (ReadOnly)
{
    <MudText Typo="Typo.body1">@LookupService.ItemToString(ItemId)</MudText>
}
else
{
    <MudAutocomplete T="long" ToStringFunc="@LookupService.ItemToString" Label="@Label" Value="@ItemId"
        ValueChanged="@OnItemChanged" SearchFunc="@LookupService.ItemSearch" Variant="Variant.Outlined"
        ShowProgressIndicator="true" ProgressIndicatorColor="Color.Default" />
}

@code {
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public long ItemId { get; set; } = 0;
    [Parameter] public string Label { get; set; } = "";
    [Parameter] public EventCallback<long> ItemIdChanged { get; set; }
    [Parameter] public Expression<Func<long>>? ItemIdValueExpression { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (ItemId > 0 && !LookupService.ItemList.TryGetValue(ItemId, out var item))
        {
            await LookupService.GetItemById(ItemId, CancellationToken.None);
        }
        StateHasChanged();
    }
    private async Task OnItemChanged(long value)
    {
        ItemId = value;
        await ItemIdChanged.InvokeAsync(value);
    }
}
