name: Deploy to Azure

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
  
  # Auto-trigger after build workflow completes (on master branch)
  workflow_run:
    workflows: ["Build and Push Images"]
    branches: [master, devops-setup]
    types:
      - completed

jobs:
  deploy:
    name: Deploy to Azure Container Apps
    runs-on: ubuntu-latest
    # Skip if workflow_run trigger comes from a failed build
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    permissions:
      actions: read
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Determine environment
      - name: Set Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
          fi
      
      # Download version artifact if this was triggered by workflow_run
      - name: Download Version Info
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: version-info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      
      - name: Extract Version Info
        if: ${{ github.event_name == 'workflow_run' }}
        run: |
          export VERSION=$(grep VERSION version.txt | cut -d= -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      # Get resource info
      - name: Get Resource Info
        id: resources
        run: |
          # Set resource group based on environment
          if [[ "${{ steps.env.outputs.ENV }}" == "prod" ]]; then
            RESOURCE_GROUP="nationohprod"
          else
            RESOURCE_GROUP="nohdevjun2025"
          fi
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          
          # Get Container App names based on naming convention: {resource_group_name}{service}
          API_APP="${RESOURCE_GROUP}server"
          FRONTEND_APP="${RESOURCE_GROUP}frontend"
          echo "API_APP=$API_APP" >> $GITHUB_OUTPUT
          echo "FRONTEND_APP=$FRONTEND_APP" >> $GITHUB_OUTPUT
          
          # Get ACR details
          ACR_LOGIN_SERVER=$(az acr list -g $RESOURCE_GROUP --query "[0].loginServer" -o tsv)
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
      
      # Update API container app with latest image
      - name: Update API Container App
        run: |
          # If triggered by workflow_run, use the version from artifact
          if [[ -n "$VERSION" ]]; then
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.server:$VERSION"
          else
            # Otherwise use the latest tag for the specified environment
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.server:${{ steps.env.outputs.ENV }}-latest"
          fi
          
          az containerapp update \
            --name ${{ steps.resources.outputs.API_APP }} \
            --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
            --image $IMAGE_TAG
      
      # Update Frontend container app with latest image
      - name: Update Frontend Container App
        run: |
          # If triggered by workflow_run, use the version from artifact
          if [[ -n "$VERSION" ]]; then
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.client:$VERSION"
          else
            # Otherwise use the latest tag for the specified environment
            IMAGE_TAG="${{ steps.resources.outputs.ACR_LOGIN_SERVER }}/app.client:${{ steps.env.outputs.ENV }}-latest"
          fi
          
          az containerapp update \
            --name ${{ steps.resources.outputs.FRONTEND_APP }} \
            --resource-group ${{ steps.resources.outputs.RESOURCE_GROUP }} \
            --image $IMAGE_TAG
      
      # Run simple smoke test to verify deployment
      - name: Smoke Test
        run: |
          # Get application URLs
          API_URL=$(az containerapp show -n ${{ steps.resources.outputs.API_APP }} -g ${{ steps.resources.outputs.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          FRONTEND_URL=$(az containerapp show -n ${{ steps.resources.outputs.FRONTEND_APP }} -g ${{ steps.resources.outputs.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          
          # Test health endpoints
          echo "Testing API health endpoint..."
          API_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://$API_URL/health || echo "failed")
          echo "API health check status: $API_HEALTH"
          
          echo "Testing Frontend availability..."
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$FRONTEND_URL || echo "failed")
          echo "Frontend status: $FRONTEND_STATUS"
          
          # Check if either test failed
          if [[ "$API_HEALTH" != "200" || "$FRONTEND_STATUS" != "200" ]]; then
            echo "Smoke tests failed. Please check the logs."
            exit 1
          fi
          
          echo "Smoke tests passed successfully!"
