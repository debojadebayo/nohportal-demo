name: CI

on:
  push:
    branches:
      - infra-update
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VERSION: 1.3.6
    runs-on: ubuntu-latest
    environment: production
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
 
    - name: 'Terraform Format Base'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: "./terraform_base"
         
    - name: 'Terraform Init Base'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: "./terraform_base"
 
    - name: 'Terraform Plan Base'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: "./terraform_base"
 
    - name: 'Terraform Apply Base'
      if: github.ref == 'refs/heads/infra-update'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: "./terraform_base"

    - name: 'Build and push image'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build the server image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/app.server:${{ github.sha }}
        file: ./Server.Dockerfile

    - name: Build the client image and push it to ACR
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.REGISTRY_LOGIN_SERVER }}/app.client:${{ github.sha }}
        file: ./Client.Dockerfile

    - name: 'Terraform Format ACA'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'fmt'
        tf_actions_working_dir: "./terraform"
         
    - name: 'Terraform Init ACA'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: "./terraform"
        args: '-var="GITHUB_SHA=${{ github.sha }}"'

    - name: 'Terraform Plan ACA'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: "./terraform"
        args: '-var="GITHUB_SHA=${{ github.sha }}"'
 
    - name: 'Terraform Apply ACA'
      if: github.ref == 'refs/heads/infra-update'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: ${{ env.TF_VERSION }}
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: "./terraform"
        args: '-var="GITHUB_SHA=${{ github.sha }}"'

  migrate:
    name: 'Database Migration'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/infra-update'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
        
    - name: Install EF Tools
      run: dotnet tool install --global dotnet-ef
      
    - name: Apply Auth Module Migrations
      run: |
        dotnet ef database update --context AuthDbContext \
          --project ./Server/Modules/Auth/Infrastructure/Server.Modules.Auth.Infrastructure.csproj \
          --startup-project ./Server/WebApi/WebApi.csproj \
          --connection "Host=${{ secrets.POSTGRES_HOST }};Port=5432;User ID=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }};Database=${{ secrets.POSTGRES_DB }};"
          
    - name: Apply Scheduling Module Migrations
      run: |
        dotnet ef database update --context SchedulingDbContext \
          --project ./Server/Modules/Scheduling/Infrastructure/Server.Modules.Scheduling.Infrastructure.csproj \
          --startup-project ./Server/WebApi/WebApi.csproj \
          --connection "Host=${{ secrets.POSTGRES_HOST }};Port=5432;User ID=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }};Database=${{ secrets.POSTGRES_DB }};"
          
    - name: Apply CRM Module Migrations
      run: |
        dotnet ef database update --context CRMDbContext \
          --project ./Server/Modules/CRM/Infrastructure/Server.Modules.CRM.Infrastructure.csproj \
          --startup-project ./Server/WebApi/WebApi.csproj \
          --connection "Host=${{ secrets.POSTGRES_HOST }};Port=5432;User ID=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }};Database=${{ secrets.POSTGRES_DB }};"
          
    - name: Apply Clinical Module Migrations
      run: |
        dotnet ef database update --context ClinicalDbContext \
          --project ./Server/Modules/Clinical/Infrastructure/Server.Modules.Clinical.Infrastructure.csproj \
          --startup-project ./Server/WebApi/WebApi.csproj \
          --connection "Host=${{ secrets.POSTGRES_HOST }};Port=5432;User ID=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }};Database=${{ secrets.POSTGRES_DB }};"
          
    - name: Apply Billing Module Migrations
      run: |
        dotnet ef database update --context BillingDbContext \
          --project ./Server/Modules/Billing/Infrastructure/Server.Modules.Billing.Infrastructure.csproj \
          --startup-project ./Server/WebApi/WebApi.csproj \
          --connection "Host=${{ secrets.POSTGRES_HOST }};Port=5432;User ID=${{ secrets.POSTGRES_USER }};Password=${{ secrets.POSTGRES_PASSWORD }};Database=${{ secrets.POSTGRES_DB }};"