name: Terraform Infrastructure

on:
  push: 
    branches: [master, production, devops-setup]
  pull_request:
    branches: [master]
      

jobs:
  terraform:
    name: infrastructure
    runs-on: ubuntu-latest
    

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for Infrastructure Changes
      id: changes
      run: |
        if git diff --name-only HEAD~1..HEAD | grep -E '^infra/|^\.github/workflows/infrastructure\.yml'; then
          echo "HAS_INFRA_CHANGES=true" >> $GITHUB_OUTPUT
        else
          echo "HAS_INFRA_CHANGES=false" >> $GITHUB_OUTPUT
        fi

    - name: Setup Terraform
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      uses: hashicorp/setup-terraform@v2

    - name: Azure Login
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

# will need to remove the devops-setup branch when we move to client portal
    - name: Set Environment Variables 
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      id: vars
      run: |
        if [[ ${{ github.ref }} == "refs/heads/production" ]]; then
           echo "ENV_NAME=prod" >> $GITHUB_OUTPUT
           echo "TF_VAR_FILE=prod.tfvars" >> $GITHUB_OUTPUT
           echo "TF_STATE_KEY=nationoh/prod.tfstate.latest" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref }} == "refs/heads/master" ]]; then
          echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
          echo "TF_VAR_FILE=dev.tfvars" >> $GITHUB_OUTPUT
          echo "TF_STATE_KEY=nationoh/dev.tfstate.latest" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref }} == "refs/heads/devops-setup" ]]; then
          echo "ENV_NAME=dev" >> $GITHUB_OUTPUT
          echo "TF_VAR_FILE=dev.tfvars" >> $GITHUB_OUTPUT
          echo "TF_STATE_KEY=nationoh/dev.tfstate.latest" >> $GITHUB_OUTPUT
        fi

    # - name: Clear Terraform Cache
    #   working-directory: ./infra
    #   run: |
    #     rm -rf .terraform
    #     rm -f .terraform.lock.hcl
    #     rm -f terraform.tfstate*

    - name: Terraform Init
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      working-directory: ./infra
      run: |
        terraform init \
          -backend-config="key=${{ steps.vars.outputs.TF_STATE_KEY }}"

    # temporary fix for the issue of refreshing the state file to deploy in a different location 
    - name: Terraform Refresh
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      working-directory: ./infra
      run: terraform refresh -var-file="${{ steps.vars.outputs.TF_VAR_FILE }}"
    
    - name: Terraform Format
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      working-directory: ./infra
      run: terraform fmt -check

    - name: Terraform Plan
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      working-directory: ./infra
      run: terraform plan -var-file="${{ steps.vars.outputs.TF_VAR_FILE }}" -out=tfplan

    - name: Terraform Apply
      if: steps.changes.outputs.HAS_INFRA_CHANGES == 'true'
      working-directory: ./infra
      run: terraform apply -auto-approve tfplan