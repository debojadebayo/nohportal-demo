// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Modules.Clinical.Infrastructure.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Server.Modules.Clinical.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ClinicalDbContext))]
    [Migration("20250327212059_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("clinical")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicianPatient", b =>
                {
                    b.Property<long>("CliniciansId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientsId")
                        .HasColumnType("bigint");

                    b.HasKey("CliniciansId", "PatientsId");

                    b.HasIndex("PatientsId");

                    b.ToTable("ClinicianPatient", "clinical");
                });

            modelBuilder.Entity("Server.Modules.Clinical.Entities.CaseReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClinicianId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NOHCustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("PatientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReportTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClinicianId");

                    b.HasIndex("PatientId");

                    b.ToTable("CaseReports", "clinical");
                });

            modelBuilder.Entity("Server.Modules.Clinical.Entities.Clinician", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeycloakUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RegulatoryNumber")
                        .HasColumnType("integer");

                    b.Property<int>("RegulatoryType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Clinicians", "clinical");
                });

            modelBuilder.Entity("Server.Modules.Clinical.Entities.Patient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KeycloakUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("NOHCustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Patients", "clinical");
                });

            modelBuilder.Entity("ClinicianPatient", b =>
                {
                    b.HasOne("Server.Modules.Clinical.Entities.Clinician", null)
                        .WithMany()
                        .HasForeignKey("CliniciansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Modules.Clinical.Entities.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Modules.Clinical.Entities.CaseReport", b =>
                {
                    b.HasOne("Server.Modules.Clinical.Entities.Clinician", null)
                        .WithMany("CaseReports")
                        .HasForeignKey("ClinicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Modules.Clinical.Entities.Patient", null)
                        .WithMany("CaseReports")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Modules.Clinical.Entities.Clinician", b =>
                {
                    b.Navigation("CaseReports");
                });

            modelBuilder.Entity("Server.Modules.Clinical.Entities.Patient", b =>
                {
                    b.Navigation("CaseReports");
                });
#pragma warning restore 612, 618
        }
    }
}
