@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<div class="page">
	<div class="sidebar">
		<NavMenu />
	</div>

	<main>
		<div class="top-row px-4">
			<AuthorizeView>
				<Authorized>
					<a href="authentication/profile">Hello, @context.User.Identity?.Name!</a>
					<button class="nav-link btn btn-link" @onclick="Logout">Log out</button>
				</Authorized>
				<NotAuthorized>
					<a href="authentication/register">Register</a>
					<a href="authentication/login">Log in</a>
				</NotAuthorized>
			</AuthorizeView>
		</div>

		<article class="content px-4">
			@Body
		</article>
	</main>
</div>

@code {
	bool authenticated;
	string? userName;

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await authenticationStateTask;
		var user = authState.User;
		authenticated = user.Identity?.IsAuthenticated ?? false;
		if (authenticated)
		{
			userName = user.Identity?.Name;
		}
	}
	private void Logout(MouseEventArgs args)
	{
		NavigationManager.NavigateToLogout("authentication/logout");
	}
}